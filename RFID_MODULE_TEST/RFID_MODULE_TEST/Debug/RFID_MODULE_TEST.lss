
RFID_MODULE_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800100  00000e92  00000f26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f1  008001b6  008001b6  00000fdc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001038  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c1d  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d43  00000000  00000000  00002db5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cd0  00000000  00000000  00003af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000374  00000000  00000000  000047c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006eb  00000000  00000000  00004b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fd2  00000000  00000000  00005227  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000061f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	7a c2       	rjmp	.+1268   	; 0x546 <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e9       	ldi	r30, 0x92	; 146
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 3b       	cpi	r26, 0xB6	; 182
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	a6 eb       	ldi	r26, 0xB6	; 182
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 3a       	cpi	r26, 0xA7	; 167
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	59 d3       	rcall	.+1714   	; 0x776 <main>
  c4:	e4 c6       	rjmp	.+3528   	; 0xe8e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <mfrc522_write>:

}


void mfrc522_write(unsigned char reg, unsigned char value)
{
  c8:	cf 93       	push	r28
  ca:	c6 2f       	mov	r28, r22
		
	//spi 통신 시작 (굳이 없어도 될듯)
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(0x01);
  cc:	a8 98       	cbi	0x15, 0	; 21
	//SPI 라인을 통해 regisger 주소 전송 (MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((reg<<1)&0x7E);
  ce:	88 0f       	add	r24, r24
  d0:	8e 77       	andi	r24, 0x7E	; 126
  d2:	13 d2       	rcall	.+1062   	; 0x4fa <spi_master_tx>
	//이후 레지스터 내부 값 전송
	spi_master_tx(value);
  d4:	8c 2f       	mov	r24, r28
  d6:	11 d2       	rcall	.+1058   	; 0x4fa <spi_master_tx>
	//RC522와 연결된 SS핀 HIGH출력
	SS_PORT |= 0x01;
  d8:	a8 9a       	sbi	0x15, 0	; 21
	//spi 통신 종료	 (굳이 없어도 될듯)
			
		
}
  da:	cf 91       	pop	r28
  dc:	08 95       	ret

000000de <mfrc522_reset>:


void mfrc522_reset(){ //장치의 데이터를 모두 리셋시킴. 
	//내부 버퍼는 유지되며, 레지스터의 데이터들은 reset values로 set된다.
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset); // 0x01<<1 , 0x0F	
  de:	6f e0       	ldi	r22, 0x0F	; 15
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	f2 cf       	rjmp	.-28     	; 0xc8 <mfrc522_write>
  e4:	08 95       	ret

000000e6 <mfrc522_read>:


unsigned char mfrc522_read(unsigned char reg){
	unsigned char value=0;
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(0x01);
  e6:	a8 98       	cbi	0x15, 0	; 21
	//SPI 라인을 통해 regisger 주소 전송 ( MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((((reg<<1)&0x7E)|0x80));
  e8:	88 0f       	add	r24, r24
  ea:	8e 77       	andi	r24, 0x7E	; 126
  ec:	80 68       	ori	r24, 0x80	; 128
  ee:	05 d2       	rcall	.+1034   	; 0x4fa <spi_master_tx>
	value = spi_master_rx(); //send dummy data and receive data.
  f0:	08 d2       	rcall	.+1040   	; 0x502 <spi_master_rx>
  f2:	a8 9a       	sbi	0x15, 0	; 21
	//RC522와 연결된 SS핀 HIGH출력
	SS_PORT |= 0x01;
  f4:	08 95       	ret

000000f6 <mfrc522_init>:
	
	return value;
}
  f6:	a0 9a       	sbi	0x14, 0	; 20
void mfrc522_init()
{
	unsigned char byte;
	//SS핀 출력모드 및 디폴트 하이로 설정해두어야 함.
	SS_DDR|=0x01; // C포트 0번핀을 SS핀으로 사용
	SS_PORT|=0x01; //Default HIGH
  f8:	a8 9a       	sbi	0x15, 0	; 21
	mfrc522_reset();
  fa:	f1 df       	rcall	.-30     	; 0xde <mfrc522_reset>
	
	// When communicating with a PICC we need a timeout if something goes wrong.
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
	// 통신을 할 때, 잘못되는 상황을 대비하여 timeout을 걸어놓아야 한다.
	mfrc522_write(TModeReg, 0x8D); //Timer setting and prescalingH
  fc:	6d e8       	ldi	r22, 0x8D	; 141
  fe:	8a e2       	ldi	r24, 0x2A	; 42
 100:	e3 df       	rcall	.-58     	; 0xc8 <mfrc522_write>
	mfrc522_write(TPrescalerReg, 0x3E); //prescalingL  ==> pre:0xD3E=3390
 102:	6e e3       	ldi	r22, 0x3E	; 62
 104:	8b e2       	ldi	r24, 0x2B	; 43
 106:	e0 df       	rcall	.-64     	; 0xc8 <mfrc522_write>
	mfrc522_write(TReloadRegH, 30); //16-bit timer reload value high.
 108:	6e e1       	ldi	r22, 0x1E	; 30
 10a:	8c e2       	ldi	r24, 0x2C	; 44
 10c:	dd df       	rcall	.-70     	; 0xc8 <mfrc522_write>
	mfrc522_write(TReloadRegL, 0); //16-bit timer reload value low. ==>Reload Timer :0x1E0=480  ==> (ie 120ms before timeout.
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	8d e2       	ldi	r24, 0x2D	; 45
 112:	da df       	rcall	.-76     	; 0xc8 <mfrc522_write>
	
	
	mfrc522_write(TxASKReg, 0x40); //Controls transmit modulation settings. (Force100ASK)
 114:	60 e4       	ldi	r22, 0x40	; 64
 116:	85 e1       	ldi	r24, 0x15	; 21
	mfrc522_write(ModeReg, 0x3D); //Defines general mode settings for transmitting and receiving.
 118:	d7 df       	rcall	.-82     	; 0xc8 <mfrc522_write>
 11a:	6d e3       	ldi	r22, 0x3D	; 61
 11c:	81 e1       	ldi	r24, 0x11	; 17
 11e:	d4 df       	rcall	.-88     	; 0xc8 <mfrc522_write>
	
	
	//AntennaOn. reset 시 해당 핀은 다시 disable된다.
	byte = mfrc522_read(TxControlReg);
 120:	84 e1       	ldi	r24, 0x14	; 20
 122:	e1 df       	rcall	.-62     	; 0xe6 <mfrc522_read>
	if(!(byte&0x03)) //0번비트 1번비트 둘다 모두 0으로 클리어 되어있는 경우
 124:	98 2f       	mov	r25, r24
 126:	93 70       	andi	r25, 0x03	; 3
 128:	21 f4       	brne	.+8      	; 0x132 <mfrc522_init+0x3c>
	{
		mfrc522_write(TxControlReg,byte|0x03);
 12a:	68 2f       	mov	r22, r24
 12c:	63 60       	ori	r22, 0x03	; 3
 12e:	84 e1       	ldi	r24, 0x14	; 20
 130:	cb cf       	rjmp	.-106    	; 0xc8 <mfrc522_write>
 132:	08 95       	ret

00000134 <mfrc522_version_check>:
 134:	cf 93       	push	r28

void mfrc522_version_check(){
	
	unsigned char byte;
	
	byte = mfrc522_read(VersionReg);
 136:	87 e3       	ldi	r24, 0x37	; 55
 138:	d6 df       	rcall	.-84     	; 0xe6 <mfrc522_read>
 13a:	c8 2f       	mov	r28, r24
	uart0_tx_string_IT(IntToString(byte));
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	83 d2       	rcall	.+1286   	; 0x646 <IntToString>
 140:	63 d2       	rcall	.+1222   	; 0x608 <uart0_tx_string_IT>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	2f ef       	ldi	r18, 0xFF	; 255
 144:	89 ef       	ldi	r24, 0xF9	; 249
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <mfrc522_version_check+0x14>
 150:	00 c0       	rjmp	.+0      	; 0x152 <mfrc522_version_check+0x1e>
 152:	00 00       	nop
	_delay_ms(20); //전송시 여유가 있어야 함...
	///
	if(byte == 0x92)
 154:	c2 39       	cpi	r28, 0x92	; 146
	{
		uart0_tx_string_IT("\n[Detected Version]: MIFARE RC522v2\n");
 156:	21 f4       	brne	.+8      	; 0x160 <mfrc522_version_check+0x2c>
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	55 d2       	rcall	.+1194   	; 0x608 <uart0_tx_string_IT>
 15e:	0a c0       	rjmp	.+20     	; 0x174 <mfrc522_version_check+0x40>
		
	}else if(byte == 0x91 || byte==0x90)
 160:	c0 59       	subi	r28, 0x90	; 144
 162:	c2 30       	cpi	r28, 0x02	; 2
	{
		uart0_tx_string_IT("\n[Detected Version]: MIFARE RC522v1\n");
 164:	20 f4       	brcc	.+8      	; 0x16e <mfrc522_version_check+0x3a>
 166:	85 e2       	ldi	r24, 0x25	; 37
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	4e d2       	rcall	.+1180   	; 0x608 <uart0_tx_string_IT>
	}else
	{
		uart0_tx_string_IT("\nNo reader found\n");
 16c:	03 c0       	rjmp	.+6      	; 0x174 <mfrc522_version_check+0x40>
 16e:	8a e4       	ldi	r24, 0x4A	; 74
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	4a d2       	rcall	.+1172   	; 0x608 <uart0_tx_string_IT>
	}
	
}
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <mfrc522_to_card>:
	
	return status;
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len)
{
 178:	3f 92       	push	r3
 17a:	4f 92       	push	r4
 17c:	5f 92       	push	r5
 17e:	6f 92       	push	r6
 180:	7f 92       	push	r7
 182:	8f 92       	push	r8
 184:	9f 92       	push	r9
 186:	af 92       	push	r10
 188:	bf 92       	push	r11
 18a:	cf 92       	push	r12
 18c:	df 92       	push	r13
 18e:	ef 92       	push	r14
 190:	ff 92       	push	r15
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	98 2e       	mov	r9, r24
 19c:	f6 2e       	mov	r15, r22
 19e:	e7 2e       	mov	r14, r23
 1a0:	44 2e       	mov	r4, r20
 1a2:	82 2e       	mov	r8, r18
 1a4:	33 2e       	mov	r3, r19
 1a6:	58 01       	movw	r10, r16
	uint8_t lastBits;
	uint8_t n;
	uint8_t	tmp;
	uint32_t i;

	switch (cmd)
 1a8:	8c e0       	ldi	r24, 0x0C	; 12
 1aa:	98 16       	cp	r9, r24
 1ac:	09 f4       	brne	.+2      	; 0x1b0 <mfrc522_to_card+0x38>
 1ae:	ba c0       	rjmp	.+372    	; 0x324 <mfrc522_to_card+0x1ac>
 1b0:	ee e0       	ldi	r30, 0x0E	; 14
 1b2:	9e 12       	cpse	r9, r30
 1b4:	03 c0       	rjmp	.+6      	; 0x1bc <mfrc522_to_card+0x44>
	{
		case MFRC522_CMD_MFAuthent:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
 1b6:	10 e1       	ldi	r17, 0x10	; 16

	switch (cmd)
	{
		case MFRC522_CMD_MFAuthent:		//Certification cards close
		{
			irqEn = 0x12;
 1b8:	02 e1       	ldi	r16, 0x12	; 18
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <mfrc522_to_card+0x48>

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
	uint8_t irqEn = 0x00;
	uint8_t waitIRq = 0x00;
 1bc:	10 e0       	ldi	r17, 0x00	; 0
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
	uint8_t irqEn = 0x00;
 1be:	00 e0       	ldi	r16, 0x00	; 0
		default:
		break;
	}
	
	//mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
	n=mfrc522_read(ComIrqReg);
 1c0:	84 e0       	ldi	r24, 0x04	; 4
 1c2:	91 df       	rcall	.-222    	; 0xe6 <mfrc522_read>
	mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
 1c4:	68 2f       	mov	r22, r24
 1c6:	6f 77       	andi	r22, 0x7F	; 127
 1c8:	84 e0       	ldi	r24, 0x04	; 4
 1ca:	7e df       	rcall	.-260    	; 0xc8 <mfrc522_write>
	n=mfrc522_read(FIFOLevelReg);
 1cc:	8a e0       	ldi	r24, 0x0A	; 10
 1ce:	8b df       	rcall	.-234    	; 0xe6 <mfrc522_read>
 1d0:	68 2f       	mov	r22, r24
	mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
 1d2:	60 68       	ori	r22, 0x80	; 128
 1d4:	8a e0       	ldi	r24, 0x0A	; 10
 1d6:	78 df       	rcall	.-272    	; 0xc8 <mfrc522_write>
	
	mfrc522_write(CommandReg, MFRC522_CMD_Idle);	//NO action; Cancel the current cmd???
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	75 df       	rcall	.-278    	; 0xc8 <mfrc522_write>
 1de:	51 2c       	mov	r5, r1

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
 1e0:	61 2c       	mov	r6, r1
 1e2:	71 2c       	mov	r7, r1
 1e4:	41 14       	cp	r4, r1
 1e6:	51 04       	cpc	r5, r1
 1e8:	61 04       	cpc	r6, r1
 1ea:	71 04       	cpc	r7, r1
 1ec:	19 f4       	brne	.+6      	; 0x1f4 <mfrc522_to_card+0x7c>
 1ee:	14 c0       	rjmp	.+40     	; 0x218 <mfrc522_to_card+0xa0>
 1f0:	10 e3       	ldi	r17, 0x30	; 48
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
 1f2:	07 e7       	ldi	r16, 0x77	; 119
			waitIRq = 0x10;
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
		{
			irqEn = 0x77;
 1f4:	cf 2d       	mov	r28, r15
 1f6:	de 2d       	mov	r29, r14
 1f8:	c1 2c       	mov	r12, r1
 1fa:	d1 2c       	mov	r13, r1
 1fc:	76 01       	movw	r14, r12
	mfrc522_write(CommandReg, MFRC522_CMD_Idle);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
	{
		mfrc522_write(FIFODataReg, send_data[i]);
 1fe:	69 91       	ld	r22, Y+
 200:	89 e0       	ldi	r24, 0x09	; 9
 202:	62 df       	rcall	.-316    	; 0xc8 <mfrc522_write>
 204:	ff ef       	ldi	r31, 0xFF	; 255
	mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
	
	mfrc522_write(CommandReg, MFRC522_CMD_Idle);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
 206:	cf 1a       	sub	r12, r31
 208:	df 0a       	sbc	r13, r31
 20a:	ef 0a       	sbc	r14, r31
 20c:	ff 0a       	sbc	r15, r31
 20e:	c4 14       	cp	r12, r4
 210:	d5 04       	cpc	r13, r5
 212:	e6 04       	cpc	r14, r6
 214:	f7 04       	cpc	r15, r7
 216:	98 f3       	brcs	.-26     	; 0x1fe <mfrc522_to_card+0x86>
	{
		mfrc522_write(FIFODataReg, send_data[i]);
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
 218:	69 2d       	mov	r22, r9
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	55 df       	rcall	.-342    	; 0xc8 <mfrc522_write>
	if (cmd == MFRC522_CMD_Transceive)
 21e:	8c e0       	ldi	r24, 0x0C	; 12
 220:	98 12       	cpse	r9, r24
	{
		n=mfrc522_read(BitFramingReg);
 222:	06 c0       	rjmp	.+12     	; 0x230 <mfrc522_to_card+0xb8>
 224:	8d e0       	ldi	r24, 0x0D	; 13
		mfrc522_write(BitFramingReg,n|0x80);
 226:	5f df       	rcall	.-322    	; 0xe6 <mfrc522_read>
 228:	68 2f       	mov	r22, r24
 22a:	60 68       	ori	r22, 0x80	; 128
 22c:	8d e0       	ldi	r24, 0x0D	; 13
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
	do
	{
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = mfrc522_read(ComIrqReg);
 22e:	4c df       	rcall	.-360    	; 0xc8 <mfrc522_write>
 230:	84 e0       	ldi	r24, 0x04	; 4
 232:	59 df       	rcall	.-334    	; 0xe6 <mfrc522_read>
 234:	f8 2e       	mov	r15, r24
 236:	c0 e0       	ldi	r28, 0x00	; 0
 238:	d0 e0       	ldi	r29, 0x00	; 0
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 23a:	11 60       	ori	r17, 0x01	; 1
 23c:	09 c0       	rjmp	.+18     	; 0x250 <mfrc522_to_card+0xd8>
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
	do
	{
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = mfrc522_read(ComIrqReg);
 23e:	84 e0       	ldi	r24, 0x04	; 4
 240:	52 df       	rcall	.-348    	; 0xe6 <mfrc522_read>
 242:	f8 2e       	mov	r15, r24
 244:	21 96       	adiw	r28, 0x01	; 1
 246:	cf 3c       	cpi	r28, 0xCF	; 207
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 248:	e7 e0       	ldi	r30, 0x07	; 7
 24a:	de 07       	cpc	r29, r30
 24c:	09 f4       	brne	.+2      	; 0x250 <mfrc522_to_card+0xd8>
 24e:	83 c0       	rjmp	.+262    	; 0x356 <mfrc522_to_card+0x1de>
 250:	81 2f       	mov	r24, r17
 252:	8f 21       	and	r24, r15
 254:	a1 f3       	breq	.-24     	; 0x23e <mfrc522_to_card+0xc6>
 256:	87 c0       	rjmp	.+270    	; 0x366 <mfrc522_to_card+0x1ee>
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
			status = CARD_FOUND;
			if (n & irqEn & 0x01)
 258:	01 70       	andi	r16, 0x01	; 1
 25a:	f0 22       	and	r15, r16
			{
				status = CARD_NOT_FOUND;			//??
 25c:	11 f0       	breq	.+4      	; 0x262 <mfrc522_to_card+0xea>
 25e:	c2 e0       	ldi	r28, 0x02	; 2
	
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
			status = CARD_FOUND;
 260:	01 c0       	rjmp	.+2      	; 0x264 <mfrc522_to_card+0xec>
			if (n & irqEn & 0x01)
			{
				status = CARD_NOT_FOUND;			//??
			}

			if (cmd == MFRC522_CMD_Transceive)
 262:	c1 e0       	ldi	r28, 0x01	; 1
 264:	fc e0       	ldi	r31, 0x0C	; 12
 266:	9f 12       	cpse	r9, r31
			{
				n = mfrc522_read(FIFOLevelReg);
 268:	8a c0       	rjmp	.+276    	; 0x37e <mfrc522_to_card+0x206>
 26a:	8a e0       	ldi	r24, 0x0A	; 10
 26c:	3c df       	rcall	.-392    	; 0xe6 <mfrc522_read>
 26e:	48 2e       	mov	r4, r24
				lastBits = mfrc522_read(ControlReg) & 0x07;
 270:	8c e0       	ldi	r24, 0x0C	; 12
 272:	39 df       	rcall	.-398    	; 0xe6 <mfrc522_read>
 274:	28 2f       	mov	r18, r24
 276:	27 70       	andi	r18, 0x07	; 7
 278:	a9 f0       	breq	.+42     	; 0x2a4 <mfrc522_to_card+0x12c>
				if (lastBits)
 27a:	84 2d       	mov	r24, r4
				{
					*back_data_len = (n-1)*8 + lastBits;
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	82 0f       	add	r24, r18
 28e:	91 1d       	adc	r25, r1
 290:	09 2e       	mov	r0, r25
 292:	00 0c       	add	r0, r0
 294:	aa 0b       	sbc	r26, r26
 296:	bb 0b       	sbc	r27, r27
 298:	f5 01       	movw	r30, r10
 29a:	80 83       	st	Z, r24
 29c:	91 83       	std	Z+1, r25	; 0x01
 29e:	a2 83       	std	Z+2, r26	; 0x02
 2a0:	b3 83       	std	Z+3, r27	; 0x03
 2a2:	11 c0       	rjmp	.+34     	; 0x2c6 <mfrc522_to_card+0x14e>
 2a4:	84 2d       	mov	r24, r4
				}
				else
				{
					*back_data_len = n*8;
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	09 2e       	mov	r0, r25
 2b6:	00 0c       	add	r0, r0
 2b8:	aa 0b       	sbc	r26, r26
 2ba:	bb 0b       	sbc	r27, r27
 2bc:	f5 01       	movw	r30, r10
 2be:	80 83       	st	Z, r24
 2c0:	91 83       	std	Z+1, r25	; 0x01
 2c2:	a2 83       	std	Z+2, r26	; 0x02
 2c4:	b3 83       	std	Z+3, r27	; 0x03
 2c6:	44 20       	and	r4, r4
				}

				if (n == 0)
 2c8:	71 f0       	breq	.+28     	; 0x2e6 <mfrc522_to_card+0x16e>
 2ca:	84 2d       	mov	r24, r4
				{
					n = MAX_LEN;
				}
				
				//Reading the received data in FIFO
				for (i=0; i<n; i++)
 2cc:	81 31       	cpi	r24, 0x11	; 17
 2ce:	08 f0       	brcs	.+2      	; 0x2d2 <mfrc522_to_card+0x15a>
 2d0:	80 e1       	ldi	r24, 0x10	; 16
 2d2:	48 2e       	mov	r4, r24
 2d4:	51 2c       	mov	r5, r1
 2d6:	61 2c       	mov	r6, r1
 2d8:	71 2c       	mov	r7, r1
 2da:	41 14       	cp	r4, r1
 2dc:	51 04       	cpc	r5, r1
 2de:	61 04       	cpc	r6, r1
 2e0:	71 04       	cpc	r7, r1
 2e2:	29 f4       	brne	.+10     	; 0x2ee <mfrc522_to_card+0x176>
 2e4:	4c c0       	rjmp	.+152    	; 0x37e <mfrc522_to_card+0x206>
 2e6:	41 2c       	mov	r4, r1
 2e8:	51 2c       	mov	r5, r1
 2ea:	32 01       	movw	r6, r4
 2ec:	43 94       	inc	r4
 2ee:	08 2d       	mov	r16, r8
 2f0:	13 2d       	mov	r17, r3
 2f2:	c1 2c       	mov	r12, r1
 2f4:	d1 2c       	mov	r13, r1
 2f6:	76 01       	movw	r14, r12
				{
					back_data[i] = mfrc522_read(FIFODataReg);
 2f8:	89 e0       	ldi	r24, 0x09	; 9
 2fa:	f5 de       	rcall	.-534    	; 0xe6 <mfrc522_read>
 2fc:	f8 01       	movw	r30, r16
 2fe:	81 93       	st	Z+, r24
 300:	8f 01       	movw	r16, r30
				{
					n = MAX_LEN;
				}
				
				//Reading the received data in FIFO
				for (i=0; i<n; i++)
 302:	ff ef       	ldi	r31, 0xFF	; 255
 304:	cf 1a       	sub	r12, r31
 306:	df 0a       	sbc	r13, r31
 308:	ef 0a       	sbc	r14, r31
 30a:	ff 0a       	sbc	r15, r31
 30c:	c4 14       	cp	r12, r4
 30e:	d5 04       	cpc	r13, r5
 310:	e6 04       	cpc	r14, r6
 312:	f7 04       	cpc	r15, r7
	{
		mfrc522_write(FIFODataReg, send_data[i]);
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
 314:	88 f3       	brcs	.-30     	; 0x2f8 <mfrc522_to_card+0x180>
 316:	33 c0       	rjmp	.+102    	; 0x37e <mfrc522_to_card+0x206>
 318:	6c e0       	ldi	r22, 0x0C	; 12
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
 31a:	81 e0       	ldi	r24, 0x01	; 1
			waitIRq = 0x10;
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
		{
			irqEn = 0x77;
 31c:	d5 de       	rcall	.-598    	; 0xc8 <mfrc522_write>
		default:
		break;
	}
	
	//mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
	n=mfrc522_read(ComIrqReg);
 31e:	10 e3       	ldi	r17, 0x30	; 48
 320:	07 e7       	ldi	r16, 0x77	; 119
 322:	80 cf       	rjmp	.-256    	; 0x224 <mfrc522_to_card+0xac>
	mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
 324:	84 e0       	ldi	r24, 0x04	; 4
 326:	df de       	rcall	.-578    	; 0xe6 <mfrc522_read>
 328:	68 2f       	mov	r22, r24
 32a:	6f 77       	andi	r22, 0x7F	; 127
 32c:	84 e0       	ldi	r24, 0x04	; 4
	n=mfrc522_read(FIFOLevelReg);
 32e:	cc de       	rcall	.-616    	; 0xc8 <mfrc522_write>
 330:	8a e0       	ldi	r24, 0x0A	; 10
 332:	d9 de       	rcall	.-590    	; 0xe6 <mfrc522_read>
	mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
 334:	68 2f       	mov	r22, r24
 336:	60 68       	ori	r22, 0x80	; 128
 338:	8a e0       	ldi	r24, 0x0A	; 10
 33a:	c6 de       	rcall	.-628    	; 0xc8 <mfrc522_write>
	
	mfrc522_write(CommandReg, MFRC522_CMD_Idle);	//NO action; Cancel the current cmd???
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	c3 de       	rcall	.-634    	; 0xc8 <mfrc522_write>

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
 342:	51 2c       	mov	r5, r1
 344:	61 2c       	mov	r6, r1
 346:	71 2c       	mov	r7, r1
 348:	41 14       	cp	r4, r1
 34a:	51 04       	cpc	r5, r1
 34c:	61 04       	cpc	r6, r1
 34e:	71 04       	cpc	r7, r1
 350:	09 f0       	breq	.+2      	; 0x354 <mfrc522_to_card+0x1dc>
		n = mfrc522_read(ComIrqReg);
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg);
 352:	4e cf       	rjmp	.-356    	; 0x1f0 <mfrc522_to_card+0x78>
 354:	e1 cf       	rjmp	.-62     	; 0x318 <mfrc522_to_card+0x1a0>
 356:	8d e0       	ldi	r24, 0x0D	; 13
	mfrc522_write(BitFramingReg,tmp&(~0x80));
 358:	c6 de       	rcall	.-628    	; 0xe6 <mfrc522_read>
 35a:	68 2f       	mov	r22, r24
 35c:	6f 77       	andi	r22, 0x7F	; 127
 35e:	8d e0       	ldi	r24, 0x0D	; 13
 360:	b3 de       	rcall	.-666    	; 0xc8 <mfrc522_write>
	return status;
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
 362:	c3 e0       	ldi	r28, 0x03	; 3
 364:	0c c0       	rjmp	.+24     	; 0x37e <mfrc522_to_card+0x206>
		n = mfrc522_read(ComIrqReg);
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg);
 366:	8d e0       	ldi	r24, 0x0D	; 13
 368:	be de       	rcall	.-644    	; 0xe6 <mfrc522_read>
 36a:	68 2f       	mov	r22, r24
	mfrc522_write(BitFramingReg,tmp&(~0x80));
 36c:	6f 77       	andi	r22, 0x7F	; 127
 36e:	8d e0       	ldi	r24, 0x0D	; 13
 370:	ab de       	rcall	.-682    	; 0xc8 <mfrc522_write>
 372:	86 e0       	ldi	r24, 0x06	; 6
 374:	b8 de       	rcall	.-656    	; 0xe6 <mfrc522_read>
	
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 376:	8b 71       	andi	r24, 0x1B	; 27
 378:	09 f4       	brne	.+2      	; 0x37c <mfrc522_to_card+0x204>
 37a:	6e cf       	rjmp	.-292    	; 0x258 <mfrc522_to_card+0xe0>
 37c:	c3 e0       	ldi	r28, 0x03	; 3
 37e:	8c 2f       	mov	r24, r28
 380:	df 91       	pop	r29
				}
			}
		}
		else
		{
			status = ERROR;
 382:	cf 91       	pop	r28
	
	//SetBitMask(ControlReg,0x80);           //timer stops
	//mfrc522_write(cmdReg, PCD_IDLE);

	return status;
}
 384:	1f 91       	pop	r17
 386:	0f 91       	pop	r16
 388:	ff 90       	pop	r15
 38a:	ef 90       	pop	r14
 38c:	df 90       	pop	r13
 38e:	cf 90       	pop	r12
 390:	bf 90       	pop	r11
 392:	af 90       	pop	r10
 394:	9f 90       	pop	r9
 396:	8f 90       	pop	r8
 398:	7f 90       	pop	r7
 39a:	6f 90       	pop	r6
 39c:	5f 90       	pop	r5
 39e:	4f 90       	pop	r4
 3a0:	3f 90       	pop	r3
 3a2:	08 95       	ret

000003a4 <mfrc522_request>:
 3a4:	ef 92       	push	r14
 3a6:	ff 92       	push	r15
 3a8:	0f 93       	push	r16
	
}


unsigned char mfrc522_request(unsigned char req_mode, unsigned char * tag_type)
{
 3aa:	1f 93       	push	r17
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	00 d0       	rcall	.+0      	; 0x3b2 <mfrc522_request+0xe>
 3b2:	00 d0       	rcall	.+0      	; 0x3b4 <mfrc522_request+0x10>
 3b4:	cd b7       	in	r28, 0x3d	; 61
 3b6:	de b7       	in	r29, 0x3e	; 62
 3b8:	18 2f       	mov	r17, r24
 3ba:	7b 01       	movw	r14, r22
	uint8_t  status;
	uint32_t backBits;//The received data bits

	//Adjustments for bit-oriented frames.
	mfrc522_write(BitFramingReg, 0x07);//TxLastBists = BitFramingReg[2..0]	???
 3bc:	67 e0       	ldi	r22, 0x07	; 7
 3be:	8d e0       	ldi	r24, 0x0D	; 13
 3c0:	83 de       	rcall	.-762    	; 0xc8 <mfrc522_write>
	
	tag_type[0] = req_mode;
 3c2:	f7 01       	movw	r30, r14
 3c4:	10 83       	st	Z, r17
	status = mfrc522_to_card(MFRC522_CMD_Transceive, tag_type, 1, tag_type, &backBits);
 3c6:	8e 01       	movw	r16, r28
 3c8:	0f 5f       	subi	r16, 0xFF	; 255
 3ca:	1f 4f       	sbci	r17, 0xFF	; 255
 3cc:	97 01       	movw	r18, r14
 3ce:	41 e0       	ldi	r20, 0x01	; 1
 3d0:	b7 01       	movw	r22, r14
 3d2:	8c e0       	ldi	r24, 0x0C	; 12
 3d4:	d1 de       	rcall	.-606    	; 0x178 <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
 3d6:	81 30       	cpi	r24, 0x01	; 1
 3d8:	59 f4       	brne	.+22     	; 0x3f0 <mfrc522_request+0x4c>
 3da:	49 81       	ldd	r20, Y+1	; 0x01
 3dc:	5a 81       	ldd	r21, Y+2	; 0x02
 3de:	6b 81       	ldd	r22, Y+3	; 0x03
 3e0:	7c 81       	ldd	r23, Y+4	; 0x04
 3e2:	40 31       	cpi	r20, 0x10	; 16
 3e4:	51 05       	cpc	r21, r1
 3e6:	61 05       	cpc	r22, r1
 3e8:	71 05       	cpc	r23, r1
 3ea:	19 f0       	breq	.+6      	; 0x3f2 <mfrc522_request+0x4e>
	{
		status = ERROR;
 3ec:	83 e0       	ldi	r24, 0x03	; 3
 3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <mfrc522_request+0x4e>
 3f0:	83 e0       	ldi	r24, 0x03	; 3
	}
	
	return status;
}
 3f2:	0f 90       	pop	r0
 3f4:	0f 90       	pop	r0
 3f6:	0f 90       	pop	r0
 3f8:	0f 90       	pop	r0
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	1f 91       	pop	r17
 400:	0f 91       	pop	r16
 402:	ff 90       	pop	r15
 404:	ef 90       	pop	r14
 406:	08 95       	ret

00000408 <mfrc522_get_card_serial>:
	return status;
}


unsigned char mfrc522_get_card_serial(unsigned char * serial_out)
{
 408:	ef 92       	push	r14
 40a:	ff 92       	push	r15
 40c:	0f 93       	push	r16
 40e:	1f 93       	push	r17
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	00 d0       	rcall	.+0      	; 0x416 <mfrc522_get_card_serial+0xe>
 416:	00 d0       	rcall	.+0      	; 0x418 <mfrc522_get_card_serial+0x10>
 418:	cd b7       	in	r28, 0x3d	; 61
 41a:	de b7       	in	r29, 0x3e	; 62
 41c:	7c 01       	movw	r14, r24
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck=0;
	uint32_t unLen;
	
	mfrc522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	8d e0       	ldi	r24, 0x0D	; 13
 422:	52 de       	rcall	.-860    	; 0xc8 <mfrc522_write>
	
	serial_out[0] = PICC_ANTICOLL;
 424:	83 e9       	ldi	r24, 0x93	; 147
 426:	f7 01       	movw	r30, r14
 428:	80 83       	st	Z, r24
	serial_out[1] = 0x20;
 42a:	80 e2       	ldi	r24, 0x20	; 32
 42c:	81 83       	std	Z+1, r24	; 0x01
	status = mfrc522_to_card(MFRC522_CMD_Transceive, serial_out, 2, serial_out, &unLen);
 42e:	8e 01       	movw	r16, r28
 430:	0f 5f       	subi	r16, 0xFF	; 255
 432:	1f 4f       	sbci	r17, 0xFF	; 255
 434:	97 01       	movw	r18, r14
 436:	42 e0       	ldi	r20, 0x02	; 2
 438:	b7 01       	movw	r22, r14
 43a:	8c e0       	ldi	r24, 0x0C	; 12
 43c:	9d de       	rcall	.-710    	; 0x178 <mfrc522_to_card>

	if (status == CARD_FOUND)
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	71 f4       	brne	.+28     	; 0x45e <mfrc522_get_card_serial+0x56>
 442:	f7 01       	movw	r30, r14
 444:	a7 01       	movw	r20, r14
 446:	4c 5f       	subi	r20, 0xFC	; 252
 448:	5f 4f       	sbci	r21, 0xFF	; 255
 44a:	90 e0       	ldi	r25, 0x00	; 0
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{
			serNumCheck ^= serial_out[i];
 44c:	21 91       	ld	r18, Z+
 44e:	92 27       	eor	r25, r18
	status = mfrc522_to_card(MFRC522_CMD_Transceive, serial_out, 2, serial_out, &unLen);

	if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
 450:	4e 17       	cp	r20, r30
 452:	5f 07       	cpc	r21, r31
 454:	d9 f7       	brne	.-10     	; 0x44c <mfrc522_get_card_serial+0x44>
		{
			serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
 456:	f7 01       	movw	r30, r14
 458:	24 81       	ldd	r18, Z+4	; 0x04
 45a:	92 13       	cpse	r25, r18
		{
			status = ERROR;
 45c:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	return status;
}
 45e:	0f 90       	pop	r0
 460:	0f 90       	pop	r0
 462:	0f 90       	pop	r0
 464:	0f 90       	pop	r0
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	1f 91       	pop	r17
 46c:	0f 91       	pop	r16
 46e:	ff 90       	pop	r15
 470:	ef 90       	pop	r14
 472:	08 95       	ret

00000474 <spi_init>:
//spi intialization function. ver1.0
//Parameter :
//if) spi master mode	: (spi_mode, spi_click_prescailing, spi_clock_and_edge)
//if) spi slave  mode	: (spi_mode)
//if) spi master mode (advance) : (spi_mode, spi_click_prescailing, spi_clock_and_edge, spi_double_speed)
void spi_init(unsigned char spi_mode, ...){
 474:	cf 93       	push	r28
 476:	df 93       	push	r29
 478:	00 d0       	rcall	.+0      	; 0x47a <spi_init+0x6>
 47a:	1f 92       	push	r1
 47c:	cd b7       	in	r28, 0x3d	; 61
 47e:	de b7       	in	r29, 0x3e	; 62
 480:	88 85       	ldd	r24, Y+8	; 0x08

	if ((spi_mode != _SPI_MASTER_MODE) && (spi_mode != _SPI_SLAVE_MODE)) return;// this line is exception code when if user insert the wrong parameter
 482:	83 30       	cpi	r24, 0x03	; 3
 484:	21 f1       	breq	.+72     	; 0x4ce <spi_init+0x5a>
 486:	81 11       	cpse	r24, r1
 488:	32 c0       	rjmp	.+100    	; 0x4ee <spi_init+0x7a>
 48a:	29 c0       	rjmp	.+82     	; 0x4de <spi_init+0x6a>
	va_list ap;
	va_start(ap, spi_mode); //spi_mode : 0 or 2
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
		param_buff[i]=(unsigned char)va_arg(ap, int);
 48c:	9c 91       	ld	r25, X
 48e:	12 96       	adiw	r26, 0x02	; 2
 490:	91 93       	st	Z+, r25
	
	va_list ap;
	va_start(ap, spi_mode); //spi_mode : 0 or 2
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
 492:	e2 17       	cp	r30, r18
 494:	f3 07       	cpc	r31, r19
 496:	d1 f7       	brne	.-12     	; 0x48c <spi_init+0x18>
		param_buff[i]=(unsigned char)va_arg(ap, int);
	} 
	if(param_buff[2]!=0&&param_buff[2]!=1) param_buff[2]=0;//exception care code about trash value at buffer
 498:	9b 81       	ldd	r25, Y+3	; 0x03
 49a:	92 30       	cpi	r25, 0x02	; 2
 49c:	20 f1       	brcs	.+72     	; 0x4e6 <spi_init+0x72>
 49e:	1b 82       	std	Y+3, r1	; 0x03
	
	
	SPCR=0; //clear CPCR register
 4a0:	1d b8       	out	0x0d, r1	; 13
	
	if(spi_mode==_SPI_MASTER_MODE){
 4a2:	83 30       	cpi	r24, 0x03	; 3
 4a4:	71 f4       	brne	.+28     	; 0x4c2 <spi_init+0x4e>
		
		/* Set MOSI and SCK output, all others input */
		SPI_PORT |= (1 << SS);
 4a6:	c0 9a       	sbi	0x18, 0	; 24
		SPI_DDR |= ((1<<MOSI)|(1<<SCK)|(1 << SS));
 4a8:	87 b3       	in	r24, 0x17	; 23
 4aa:	87 60       	ori	r24, 0x07	; 7
 4ac:	87 bb       	out	0x17, r24	; 23
		
		spcr_buff=((1<<SPE)|(1<<MSTR)|(param_buff[0])|(param_buff[1]));
 4ae:	99 81       	ldd	r25, Y+1	; 0x01
 4b0:	8a 81       	ldd	r24, Y+2	; 0x02
 4b2:	89 2b       	or	r24, r25
 4b4:	80 65       	ori	r24, 0x50	; 80
		SPSR|=(param_buff[2]<<0);//double speed set
 4b6:	2e b1       	in	r18, 0x0e	; 14
 4b8:	9b 81       	ldd	r25, Y+3	; 0x03
 4ba:	92 2b       	or	r25, r18
 4bc:	9e b9       	out	0x0e, r25	; 14
		SPCR=spcr_buff;
 4be:	8d b9       	out	0x0d, r24	; 13
 4c0:	16 c0       	rjmp	.+44     	; 0x4ee <spi_init+0x7a>
 
	}
	else if(spi_mode==_SPI_SLAVE_MODE){
 4c2:	81 11       	cpse	r24, r1
 4c4:	14 c0       	rjmp	.+40     	; 0x4ee <spi_init+0x7a>
		/* Set MISO output, all others input */
		SPI_DDR |= (1<<MISO);
 4c6:	bb 9a       	sbi	0x17, 3	; 23
		/* Enable SPI */
		SPCR = (1<<SPE);
 4c8:	80 e4       	ldi	r24, 0x40	; 64
 4ca:	8d b9       	out	0x0d, r24	; 13
 4cc:	10 c0       	rjmp	.+32     	; 0x4ee <spi_init+0x7a>
 4ce:	de 01       	movw	r26, r28
 4d0:	19 96       	adiw	r26, 0x09	; 9
 4d2:	fe 01       	movw	r30, r28
 4d4:	31 96       	adiw	r30, 0x01	; 1
 4d6:	9e 01       	movw	r18, r28
 4d8:	2c 5f       	subi	r18, 0xFC	; 252
 4da:	3f 4f       	sbci	r19, 0xFF	; 255
 4dc:	d7 cf       	rjmp	.-82     	; 0x48c <spi_init+0x18>
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
		param_buff[i]=(unsigned char)va_arg(ap, int);
	} 
	if(param_buff[2]!=0&&param_buff[2]!=1) param_buff[2]=0;//exception care code about trash value at buffer
 4de:	9b 81       	ldd	r25, Y+3	; 0x03
 4e0:	92 30       	cpi	r25, 0x02	; 2
 4e2:	e8 f6       	brcc	.-70     	; 0x49e <spi_init+0x2a>
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <spi_init+0x76>
	
	
	SPCR=0; //clear CPCR register
 4e6:	1d b8       	out	0x0d, r1	; 13
 4e8:	de cf       	rjmp	.-68     	; 0x4a6 <spi_init+0x32>
 4ea:	1d b8       	out	0x0d, r1	; 13
 4ec:	ec cf       	rjmp	.-40     	; 0x4c6 <spi_init+0x52>
	}
	else {
		//error
		return;
	}
}
 4ee:	0f 90       	pop	r0
 4f0:	0f 90       	pop	r0
 4f2:	0f 90       	pop	r0
 4f4:	df 91       	pop	r29
 4f6:	cf 91       	pop	r28
 4f8:	08 95       	ret

000004fa <spi_master_tx>:


void spi_master_tx(unsigned char data){
	SPDR = data;
 4fa:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
 4fc:	77 9b       	sbis	0x0e, 7	; 14
 4fe:	fe cf       	rjmp	.-4      	; 0x4fc <spi_master_tx+0x2>
}
 500:	08 95       	ret

00000502 <spi_master_rx>:

unsigned char spi_master_rx(void){
	SPDR=0x00; //dummy code. 수신 받기 위해 더미데이터를 슬레이브로 전송시킴.
 502:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR&(1<<SPIF)));
 504:	77 9b       	sbis	0x0e, 7	; 14
 506:	fe cf       	rjmp	.-4      	; 0x504 <spi_master_rx+0x2>
	
	return SPDR;
 508:	8f b1       	in	r24, 0x0f	; 15
}
 50a:	08 95       	ret

0000050c <_uart_tx_string_in_isr>:
	
	uart1.tx1Cnt=1;
	uart1.tx1CntMax=_len+1;
	UCSR1B |= (1<<TXCIE1);
	
}
 50c:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <__data_end+0x64>
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	ea 54       	subi	r30, 0x4A	; 74
 514:	fe 4f       	sbci	r31, 0xFE	; 254
 516:	80 81       	ld	r24, Z
 518:	81 11       	cpse	r24, r1
 51a:	09 c0       	rjmp	.+18     	; 0x52e <_uart_tx_string_in_isr+0x22>
 51c:	56 98       	cbi	0x0a, 6	; 10
 51e:	84 e6       	ldi	r24, 0x64	; 100
 520:	e6 eb       	ldi	r30, 0xB6	; 182
 522:	f1 e0       	ldi	r31, 0x01	; 1
 524:	df 01       	movw	r26, r30
 526:	1d 92       	st	X+, r1
 528:	8a 95       	dec	r24
 52a:	e9 f7       	brne	.-6      	; 0x526 <_uart_tx_string_in_isr+0x1a>
 52c:	08 95       	ret
 52e:	aa e1       	ldi	r26, 0x1A	; 26
 530:	b2 e0       	ldi	r27, 0x02	; 2
 532:	ec 91       	ld	r30, X
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	8e 0f       	add	r24, r30
 538:	8c 93       	st	X, r24
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	ea 54       	subi	r30, 0x4A	; 74
 53e:	fe 4f       	sbci	r31, 0xFE	; 254
 540:	80 81       	ld	r24, Z
 542:	8c b9       	out	0x0c, r24	; 12
 544:	08 95       	ret

00000546 <__vector_20>:
 546:	1f 92       	push	r1
 548:	0f 92       	push	r0
 54a:	0f b6       	in	r0, 0x3f	; 63
 54c:	0f 92       	push	r0
 54e:	11 24       	eor	r1, r1
 550:	0b b6       	in	r0, 0x3b	; 59
 552:	0f 92       	push	r0
 554:	2f 93       	push	r18
 556:	3f 93       	push	r19
 558:	4f 93       	push	r20
 55a:	5f 93       	push	r21
 55c:	6f 93       	push	r22
 55e:	7f 93       	push	r23
 560:	8f 93       	push	r24
 562:	9f 93       	push	r25
 564:	af 93       	push	r26
 566:	bf 93       	push	r27
 568:	ef 93       	push	r30
 56a:	ff 93       	push	r31
 56c:	cf df       	rcall	.-98     	; 0x50c <_uart_tx_string_in_isr>
 56e:	ff 91       	pop	r31
 570:	ef 91       	pop	r30
 572:	bf 91       	pop	r27
 574:	af 91       	pop	r26
 576:	9f 91       	pop	r25
 578:	8f 91       	pop	r24
 57a:	7f 91       	pop	r23
 57c:	6f 91       	pop	r22
 57e:	5f 91       	pop	r21
 580:	4f 91       	pop	r20
 582:	3f 91       	pop	r19
 584:	2f 91       	pop	r18
 586:	0f 90       	pop	r0
 588:	0b be       	out	0x3b, r0	; 59
 58a:	0f 90       	pop	r0
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	0f 90       	pop	r0
 590:	1f 90       	pop	r1
 592:	18 95       	reti

00000594 <uart_init>:
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
 598:	ec 01       	movw	r28, r24
 59a:	9b 01       	movw	r18, r22
 59c:	40 e0       	ldi	r20, 0x00	; 0
 59e:	50 e0       	ldi	r21, 0x00	; 0
 5a0:	60 e4       	ldi	r22, 0x40	; 64
 5a2:	72 e4       	ldi	r23, 0x42	; 66
 5a4:	8f e0       	ldi	r24, 0x0F	; 15
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	5f d1       	rcall	.+702    	; 0x868 <__udivmodsi4>
 5aa:	21 50       	subi	r18, 0x01	; 1
 5ac:	31 09       	sbc	r19, r1
 5ae:	20 97       	sbiw	r28, 0x00	; 0
 5b0:	51 f4       	brne	.+20     	; 0x5c6 <uart_init+0x32>
 5b2:	10 98       	cbi	0x02, 0	; 2
 5b4:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 5b8:	29 b9       	out	0x09, r18	; 9
 5ba:	88 e0       	ldi	r24, 0x08	; 8
 5bc:	8a b9       	out	0x0a, r24	; 10
 5be:	86 e0       	ldi	r24, 0x06	; 6
 5c0:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 5c4:	0c c0       	rjmp	.+24     	; 0x5de <uart_init+0x4a>
 5c6:	21 97       	sbiw	r28, 0x01	; 1
 5c8:	51 f4       	brne	.+20     	; 0x5de <uart_init+0x4a>
 5ca:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 5ce:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 5d2:	88 e0       	ldi	r24, 0x08	; 8
 5d4:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
 5d8:	86 e0       	ldi	r24, 0x06	; 6
 5da:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	08 95       	ret

000005e4 <uart0_tx_char>:
 5e4:	5d 9b       	sbis	0x0b, 5	; 11
 5e6:	fe cf       	rjmp	.-4      	; 0x5e4 <uart0_tx_char>
 5e8:	8c b9       	out	0x0c, r24	; 12
 5ea:	08 95       	ret

000005ec <uart0_tx_string>:
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	ec 01       	movw	r28, r24
 5f2:	88 81       	ld	r24, Y
 5f4:	88 23       	and	r24, r24
 5f6:	29 f0       	breq	.+10     	; 0x602 <uart0_tx_string+0x16>
 5f8:	21 96       	adiw	r28, 0x01	; 1
 5fa:	f4 df       	rcall	.-24     	; 0x5e4 <uart0_tx_char>
 5fc:	89 91       	ld	r24, Y+
 5fe:	81 11       	cpse	r24, r1
 600:	fc cf       	rjmp	.-8      	; 0x5fa <uart0_tx_string+0xe>
 602:	df 91       	pop	r29
 604:	cf 91       	pop	r28
 606:	08 95       	ret

00000608 <uart0_tx_string_IT>:
 608:	cf 93       	push	r28
 60a:	df 93       	push	r29
 60c:	fc 01       	movw	r30, r24
 60e:	01 90       	ld	r0, Z+
 610:	00 20       	and	r0, r0
 612:	e9 f7       	brne	.-6      	; 0x60e <uart0_tx_string_IT+0x6>
 614:	31 97       	sbiw	r30, 0x01	; 1
 616:	ef 01       	movw	r28, r30
 618:	c8 1b       	sub	r28, r24
 61a:	d9 0b       	sbc	r29, r25
 61c:	ae 01       	movw	r20, r28
 61e:	bc 01       	movw	r22, r24
 620:	86 eb       	ldi	r24, 0xB6	; 182
 622:	91 e0       	ldi	r25, 0x01	; 1
 624:	4a d1       	rcall	.+660    	; 0x8ba <strncpy>
 626:	5d 9b       	sbis	0x0b, 5	; 11
 628:	fe cf       	rjmp	.-4      	; 0x626 <uart0_tx_string_IT+0x1e>
 62a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <__data_end>
 62e:	8c b9       	out	0x0c, r24	; 12
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <__data_end+0x64>
 636:	ec 2f       	mov	r30, r28
 638:	ef 5f       	subi	r30, 0xFF	; 255
 63a:	e0 93 1b 02 	sts	0x021B, r30	; 0x80021b <__data_end+0x65>
 63e:	56 9a       	sbi	0x0a, 6	; 10
 640:	df 91       	pop	r29
 642:	cf 91       	pop	r28
 644:	08 95       	ret

00000646 <IntToString>:

char * IntToString(int num)
{
 646:	0f 93       	push	r16
 648:	1f 93       	push	r17
 64a:	cf 93       	push	r28
 64c:	df 93       	push	r29
 64e:	cd b7       	in	r28, 0x3d	; 61
 650:	de b7       	in	r29, 0x3e	; 62
 652:	64 97       	sbiw	r28, 0x14	; 20
 654:	0f b6       	in	r0, 0x3f	; 63
 656:	f8 94       	cli
 658:	de bf       	out	0x3e, r29	; 62
 65a:	0f be       	out	0x3f, r0	; 63
 65c:	cd bf       	out	0x3d, r28	; 61
	/** Dummy Function*/
	char buf[20];
	sprintf(buf,"%d,",num); //고유 자릿값
 65e:	9f 93       	push	r25
 660:	8f 93       	push	r24
 662:	8c e5       	ldi	r24, 0x5C	; 92
 664:	91 e0       	ldi	r25, 0x01	; 1
 666:	9f 93       	push	r25
 668:	8f 93       	push	r24
 66a:	8e 01       	movw	r16, r28
 66c:	0f 5f       	subi	r16, 0xFF	; 255
 66e:	1f 4f       	sbci	r17, 0xFF	; 255
 670:	1f 93       	push	r17
 672:	0f 93       	push	r16
 674:	31 d1       	rcall	.+610    	; 0x8d8 <sprintf>
	
	strcpy(buff.itos_buff,buf);
 676:	b8 01       	movw	r22, r16
 678:	82 e8       	ldi	r24, 0x82	; 130
 67a:	92 e0       	ldi	r25, 0x02	; 2
 67c:	17 d1       	rcall	.+558    	; 0x8ac <strcpy>
	
	return (buff.itos_buff);
 67e:	0f 90       	pop	r0
 680:	0f 90       	pop	r0
 682:	0f 90       	pop	r0
 684:	0f 90       	pop	r0
 686:	0f 90       	pop	r0
 688:	0f 90       	pop	r0
}
 68a:	82 e8       	ldi	r24, 0x82	; 130
 68c:	92 e0       	ldi	r25, 0x02	; 2
 68e:	64 96       	adiw	r28, 0x14	; 20
 690:	0f b6       	in	r0, 0x3f	; 63
 692:	f8 94       	cli
 694:	de bf       	out	0x3e, r29	; 62
 696:	0f be       	out	0x3f, r0	; 63
 698:	cd bf       	out	0x3d, r28	; 61
 69a:	df 91       	pop	r29
 69c:	cf 91       	pop	r28
 69e:	1f 91       	pop	r17
 6a0:	0f 91       	pop	r16
 6a2:	08 95       	ret

000006a4 <HexToString>:
 
 char * HexToString(char num)
 {
 6a4:	0f 93       	push	r16
 6a6:	1f 93       	push	r17
 6a8:	cf 93       	push	r28
 6aa:	df 93       	push	r29
 6ac:	cd b7       	in	r28, 0x3d	; 61
 6ae:	de b7       	in	r29, 0x3e	; 62
 6b0:	64 97       	sbiw	r28, 0x14	; 20
 6b2:	0f b6       	in	r0, 0x3f	; 63
 6b4:	f8 94       	cli
 6b6:	de bf       	out	0x3e, r29	; 62
 6b8:	0f be       	out	0x3f, r0	; 63
 6ba:	cd bf       	out	0x3d, r28	; 61
	 /** Dummy Function*/
	 char buf[20];
	 sprintf(buf,"0x%x,",num); //고유 자릿값
 6bc:	1f 92       	push	r1
 6be:	8f 93       	push	r24
 6c0:	80 e6       	ldi	r24, 0x60	; 96
 6c2:	91 e0       	ldi	r25, 0x01	; 1
 6c4:	9f 93       	push	r25
 6c6:	8f 93       	push	r24
 6c8:	8e 01       	movw	r16, r28
 6ca:	0f 5f       	subi	r16, 0xFF	; 255
 6cc:	1f 4f       	sbci	r17, 0xFF	; 255
 6ce:	1f 93       	push	r17
 6d0:	0f 93       	push	r16
 6d2:	02 d1       	rcall	.+516    	; 0x8d8 <sprintf>
	 
	 strcpy(buff.itos_buff,buf);
 6d4:	b8 01       	movw	r22, r16
 6d6:	82 e8       	ldi	r24, 0x82	; 130
 6d8:	92 e0       	ldi	r25, 0x02	; 2
 6da:	e8 d0       	rcall	.+464    	; 0x8ac <strcpy>
	 
	 return (buff.itos_buff);
 6dc:	0f 90       	pop	r0
 6de:	0f 90       	pop	r0
 6e0:	0f 90       	pop	r0
 6e2:	0f 90       	pop	r0
 6e4:	0f 90       	pop	r0
 6e6:	0f 90       	pop	r0
 }
 6e8:	82 e8       	ldi	r24, 0x82	; 130
 6ea:	92 e0       	ldi	r25, 0x02	; 2
 6ec:	64 96       	adiw	r28, 0x14	; 20
 6ee:	0f b6       	in	r0, 0x3f	; 63
 6f0:	f8 94       	cli
 6f2:	de bf       	out	0x3e, r29	; 62
 6f4:	0f be       	out	0x3f, r0	; 63
 6f6:	cd bf       	out	0x3d, r28	; 61
 6f8:	df 91       	pop	r29
 6fa:	cf 91       	pop	r28
 6fc:	1f 91       	pop	r17
 6fe:	0f 91       	pop	r16
 700:	08 95       	ret

00000702 <mfrc_print_serial>:




void mfrc_print_serial(int _type)
{
 702:	0f 93       	push	r16
 704:	1f 93       	push	r17
 706:	cf 93       	push	r28
 708:	df 93       	push	r29
	switch(_type)
 70a:	81 30       	cpi	r24, 0x01	; 1
 70c:	91 05       	cpc	r25, r1
 70e:	91 f0       	breq	.+36     	; 0x734 <mfrc_print_serial+0x32>
 710:	82 30       	cpi	r24, 0x02	; 2
 712:	91 05       	cpc	r25, r1
 714:	f1 f0       	breq	.+60     	; 0x752 <mfrc_print_serial+0x50>
 716:	89 2b       	or	r24, r25
 718:	49 f5       	brne	.+82     	; 0x76c <mfrc_print_serial+0x6a>
	{
		case ASCII_TYPE:
		
		uart0_tx_string("\n    ascii: ");
 71a:	86 e6       	ldi	r24, 0x66	; 102
 71c:	91 e0       	ldi	r25, 0x01	; 1
 71e:	66 df       	rcall	.-308    	; 0x5ec <uart0_tx_string>
 720:	c7 e9       	ldi	r28, 0x97	; 151
 722:	d2 e0       	ldi	r29, 0x02	; 2
 724:	0b e9       	ldi	r16, 0x9B	; 155
 726:	12 e0       	ldi	r17, 0x02	; 2
		for(int i=0;i<4;i++){
			//uart0_tx_string_IT(IntToString(str[i]));
			uart0_tx_char(str[i]);
 728:	89 91       	ld	r24, Y+
 72a:	5c df       	rcall	.-328    	; 0x5e4 <uart0_tx_char>
	switch(_type)
	{
		case ASCII_TYPE:
		
		uart0_tx_string("\n    ascii: ");
		for(int i=0;i<4;i++){
 72c:	0c 17       	cp	r16, r28
 72e:	1d 07       	cpc	r17, r29
 730:	d9 f7       	brne	.-10     	; 0x728 <mfrc_print_serial+0x26>
 732:	1c c0       	rjmp	.+56     	; 0x76c <mfrc_print_serial+0x6a>
		}
		
		break;
		case DECIMAL_TYPE:
		
		uart0_tx_string("\n    dec: ");
 734:	83 e7       	ldi	r24, 0x73	; 115
 736:	91 e0       	ldi	r25, 0x01	; 1
 738:	59 df       	rcall	.-334    	; 0x5ec <uart0_tx_string>
 73a:	c7 e9       	ldi	r28, 0x97	; 151
 73c:	d2 e0       	ldi	r29, 0x02	; 2
 73e:	0b e9       	ldi	r16, 0x9B	; 155
 740:	12 e0       	ldi	r17, 0x02	; 2
		for(int i=0;i<4;i++){
			//uart0_tx_string_IT(IntToString(str[i]));
			//uart0_tx_char(str[i]);
			uart0_tx_string(IntToString(str[i]));
 742:	89 91       	ld	r24, Y+
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	7f df       	rcall	.-258    	; 0x646 <IntToString>
 748:	51 df       	rcall	.-350    	; 0x5ec <uart0_tx_string>
 74a:	c0 17       	cp	r28, r16
		
		break;
		case DECIMAL_TYPE:
		
		uart0_tx_string("\n    dec: ");
		for(int i=0;i<4;i++){
 74c:	d1 07       	cpc	r29, r17
 74e:	c9 f7       	brne	.-14     	; 0x742 <mfrc_print_serial+0x40>
 750:	0d c0       	rjmp	.+26     	; 0x76c <mfrc_print_serial+0x6a>
		
		
		break;
		case HEXDECIMAL_TYPE:
		
		uart0_tx_string("\n    hex: ");
 752:	8e e7       	ldi	r24, 0x7E	; 126
 754:	91 e0       	ldi	r25, 0x01	; 1
 756:	4a df       	rcall	.-364    	; 0x5ec <uart0_tx_string>
 758:	c7 e9       	ldi	r28, 0x97	; 151
 75a:	d2 e0       	ldi	r29, 0x02	; 2
 75c:	0b e9       	ldi	r16, 0x9B	; 155
		for(int i=0;i<4;i++){
			//uart0_tx_string_IT(IntToString(str[i]));
			//uart0_tx_char(str[i]);
			uart0_tx_string(HexToString(str[i]));
 75e:	12 e0       	ldi	r17, 0x02	; 2
 760:	89 91       	ld	r24, Y+
 762:	a0 df       	rcall	.-192    	; 0x6a4 <HexToString>
 764:	43 df       	rcall	.-378    	; 0x5ec <uart0_tx_string>
 766:	c0 17       	cp	r28, r16
		
		break;
		case HEXDECIMAL_TYPE:
		
		uart0_tx_string("\n    hex: ");
		for(int i=0;i<4;i++){
 768:	d1 07       	cpc	r29, r17
 76a:	d1 f7       	brne	.-12     	; 0x760 <mfrc_print_serial+0x5e>
 76c:	df 91       	pop	r29
		
		break;
		
	}
	
 76e:	cf 91       	pop	r28
 770:	1f 91       	pop	r17
 772:	0f 91       	pop	r16
 774:	08 95       	ret

00000776 <main>:
 776:	78 94       	sei
	//DDRB=0x07;
	
	
	sei();
	
	spi_init(_SPI_MASTER_MODE,_SPI_CLK_PRESC_16,_SPI_CLK_LO_LEADING);
 778:	1f 92       	push	r1
 77a:	1f 92       	push	r1
 77c:	1f 92       	push	r1
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	8f 93       	push	r24
 782:	83 e0       	ldi	r24, 0x03	; 3
 784:	8f 93       	push	r24
 786:	76 de       	rcall	.-788    	; 0x474 <spi_init>
	spi_master_tx(0x67);
 788:	87 e6       	ldi	r24, 0x67	; 103
	
	mfrc522_init(); //아직 덜 구현
 78a:	b7 de       	rcall	.-658    	; 0x4fa <spi_master_tx>
 78c:	b4 dc       	rcall	.-1688   	; 0xf6 <mfrc522_init>
	
	uart_init(0,9600);
 78e:	60 e8       	ldi	r22, 0x80	; 128
 790:	75 e2       	ldi	r23, 0x25	; 37
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	90 e0       	ldi	r25, 0x00	; 0
	
	//uart0_tx_string_IT("RFID module TEST ...\n");
	uart0_tx_string("RFID module TEST ...\n");
 796:	fe de       	rcall	.-516    	; 0x594 <uart_init>
 798:	89 e8       	ldi	r24, 0x89	; 137
 79a:	91 e0       	ldi	r25, 0x01	; 1
 79c:	27 df       	rcall	.-434    	; 0x5ec <uart0_tx_string>
 79e:	2f ef       	ldi	r18, 0xFF	; 255
 7a0:	83 ed       	ldi	r24, 0xD3	; 211
 7a2:	90 e3       	ldi	r25, 0x30	; 48
 7a4:	21 50       	subi	r18, 0x01	; 1
 7a6:	80 40       	sbci	r24, 0x00	; 0
 7a8:	90 40       	sbci	r25, 0x00	; 0
 7aa:	e1 f7       	brne	.-8      	; 0x7a4 <main+0x2e>
	
	_delay_ms(1000);
	
	//version check function
	mfrc522_version_check();
 7ac:	00 c0       	rjmp	.+0      	; 0x7ae <main+0x38>
 7ae:	00 00       	nop
	
	
	//비트마스킹
	byte=mfrc522_read(ComIEnReg);
 7b0:	c1 dc       	rcall	.-1662   	; 0x134 <mfrc522_version_check>
 7b2:	82 e0       	ldi	r24, 0x02	; 2
 7b4:	98 dc       	rcall	.-1744   	; 0xe6 <mfrc522_read>
	mfrc522_write(ComIEnReg,byte|0x20);
 7b6:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <byte>
 7ba:	68 2f       	mov	r22, r24
 7bc:	60 62       	ori	r22, 0x20	; 32
	byte=mfrc522_read(DivIEnReg);
 7be:	82 e0       	ldi	r24, 0x02	; 2
 7c0:	83 dc       	rcall	.-1786   	; 0xc8 <mfrc522_write>
 7c2:	83 e0       	ldi	r24, 0x03	; 3
 7c4:	90 dc       	rcall	.-1760   	; 0xe6 <mfrc522_read>
 7c6:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <byte>
	mfrc522_write(DivIEnReg,byte|0x80);
 7ca:	68 2f       	mov	r22, r24
 7cc:	60 68       	ori	r22, 0x80	; 128
 7ce:	83 e0       	ldi	r24, 0x03	; 3
 7d0:	7b dc       	rcall	.-1802   	; 0xc8 <mfrc522_write>
 7d2:	2f ef       	ldi	r18, 0xFF	; 255
 7d4:	8d e3       	ldi	r24, 0x3D	; 61
 7d6:	99 e4       	ldi	r25, 0x49	; 73
 7d8:	21 50       	subi	r18, 0x01	; 1
 7da:	80 40       	sbci	r24, 0x00	; 0
 7dc:	90 40       	sbci	r25, 0x00	; 0
 7de:	e1 f7       	brne	.-8      	; 0x7d8 <main+0x62>
 7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <main+0x6c>
 7e2:	00 00       	nop
 7e4:	0f 90       	pop	r0
 7e6:	0f 90       	pop	r0
 7e8:	0f 90       	pop	r0
 7ea:	0f 90       	pop	r0
	while (1)
	{
		// Place your code here
		
		//spi_master_tx(0x6b);
		byte = mfrc522_request(PICC_REQALL,str);//
 7ec:	0f 90       	pop	r0
 7ee:	67 e9       	ldi	r22, 0x97	; 151
 7f0:	72 e0       	ldi	r23, 0x02	; 2
 7f2:	82 e5       	ldi	r24, 0x52	; 82
 7f4:	d7 dd       	rcall	.-1106   	; 0x3a4 <mfrc522_request>
 7f6:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <byte>
 7fa:	2f ef       	ldi	r18, 0xFF	; 255
 7fc:	89 ef       	ldi	r24, 0xF9	; 249
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	21 50       	subi	r18, 0x01	; 1
 802:	80 40       	sbci	r24, 0x00	; 0
 804:	90 40       	sbci	r25, 0x00	; 0
 806:	e1 f7       	brne	.-8      	; 0x800 <main+0x8a>
 808:	00 c0       	rjmp	.+0      	; 0x80a <main+0x94>
		//uart0_tx_string_IT(IntToString(byte));
		_delay_ms(20);
		if(byte==CARD_FOUND){
 80a:	00 00       	nop
 80c:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <byte>
			byte=mfrc522_get_card_serial(str);
 810:	81 30       	cpi	r24, 0x01	; 1
 812:	b9 f4       	brne	.+46     	; 0x842 <main+0xcc>
 814:	87 e9       	ldi	r24, 0x97	; 151
 816:	92 e0       	ldi	r25, 0x02	; 2
			if(byte==CARD_FOUND){
 818:	f7 dd       	rcall	.-1042   	; 0x408 <mfrc522_get_card_serial>
				
				//uart0_tx_string_IT("\nuid: ");
				uart0_tx_string("\n[charck uid]: ");
 81a:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <byte>
 81e:	81 30       	cpi	r24, 0x01	; 1
				//_delay_ms(20);	
				mfrc_print_serial(ASCII_TYPE);
 820:	69 f4       	brne	.+26     	; 0x83c <main+0xc6>
 822:	8f e9       	ldi	r24, 0x9F	; 159
 824:	91 e0       	ldi	r25, 0x01	; 1
 826:	e2 de       	rcall	.-572    	; 0x5ec <uart0_tx_string>
				mfrc_print_serial(DECIMAL_TYPE);
 828:	80 e0       	ldi	r24, 0x00	; 0
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	6a df       	rcall	.-300    	; 0x702 <mfrc_print_serial>
 82e:	81 e0       	ldi	r24, 0x01	; 1
				mfrc_print_serial(HEXDECIMAL_TYPE);						
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	67 df       	rcall	.-306    	; 0x702 <mfrc_print_serial>
 834:	82 e0       	ldi	r24, 0x02	; 2
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	64 df       	rcall	.-312    	; 0x702 <mfrc_print_serial>
			}
			else {
				uart0_tx_string("error\n");
 83a:	03 c0       	rjmp	.+6      	; 0x842 <main+0xcc>
 83c:	8f ea       	ldi	r24, 0xAF	; 175
 83e:	91 e0       	ldi	r25, 0x01	; 1
 840:	d5 de       	rcall	.-598    	; 0x5ec <uart0_tx_string>
 842:	2f ef       	ldi	r18, 0xFF	; 255
 844:	89 e6       	ldi	r24, 0x69	; 105
 846:	98 e1       	ldi	r25, 0x18	; 24
 848:	21 50       	subi	r18, 0x01	; 1
 84a:	80 40       	sbci	r24, 0x00	; 0
 84c:	90 40       	sbci	r25, 0x00	; 0
 84e:	e1 f7       	brne	.-8      	; 0x848 <main+0xd2>
 850:	00 c0       	rjmp	.+0      	; 0x852 <main+0xdc>
 852:	00 00       	nop
 854:	2f ef       	ldi	r18, 0xFF	; 255
 856:	89 e6       	ldi	r24, 0x69	; 105
 858:	98 e1       	ldi	r25, 0x18	; 24
 85a:	21 50       	subi	r18, 0x01	; 1
 85c:	80 40       	sbci	r24, 0x00	; 0
 85e:	90 40       	sbci	r25, 0x00	; 0
 860:	e1 f7       	brne	.-8      	; 0x85a <main+0xe4>
 862:	00 c0       	rjmp	.+0      	; 0x864 <main+0xee>
 864:	00 00       	nop
 866:	c3 cf       	rjmp	.-122    	; 0x7ee <main+0x78>

00000868 <__udivmodsi4>:
 868:	a1 e2       	ldi	r26, 0x21	; 33
 86a:	1a 2e       	mov	r1, r26
 86c:	aa 1b       	sub	r26, r26
 86e:	bb 1b       	sub	r27, r27
 870:	fd 01       	movw	r30, r26
 872:	0d c0       	rjmp	.+26     	; 0x88e <__udivmodsi4_ep>

00000874 <__udivmodsi4_loop>:
 874:	aa 1f       	adc	r26, r26
 876:	bb 1f       	adc	r27, r27
 878:	ee 1f       	adc	r30, r30
 87a:	ff 1f       	adc	r31, r31
 87c:	a2 17       	cp	r26, r18
 87e:	b3 07       	cpc	r27, r19
 880:	e4 07       	cpc	r30, r20
 882:	f5 07       	cpc	r31, r21
 884:	20 f0       	brcs	.+8      	; 0x88e <__udivmodsi4_ep>
 886:	a2 1b       	sub	r26, r18
 888:	b3 0b       	sbc	r27, r19
 88a:	e4 0b       	sbc	r30, r20
 88c:	f5 0b       	sbc	r31, r21

0000088e <__udivmodsi4_ep>:
 88e:	66 1f       	adc	r22, r22
 890:	77 1f       	adc	r23, r23
 892:	88 1f       	adc	r24, r24
 894:	99 1f       	adc	r25, r25
 896:	1a 94       	dec	r1
 898:	69 f7       	brne	.-38     	; 0x874 <__udivmodsi4_loop>
 89a:	60 95       	com	r22
 89c:	70 95       	com	r23
 89e:	80 95       	com	r24
 8a0:	90 95       	com	r25
 8a2:	9b 01       	movw	r18, r22
 8a4:	ac 01       	movw	r20, r24
 8a6:	bd 01       	movw	r22, r26
 8a8:	cf 01       	movw	r24, r30
 8aa:	08 95       	ret

000008ac <strcpy>:
 8ac:	fb 01       	movw	r30, r22
 8ae:	dc 01       	movw	r26, r24
 8b0:	01 90       	ld	r0, Z+
 8b2:	0d 92       	st	X+, r0
 8b4:	00 20       	and	r0, r0
 8b6:	e1 f7       	brne	.-8      	; 0x8b0 <strcpy+0x4>
 8b8:	08 95       	ret

000008ba <strncpy>:
 8ba:	fb 01       	movw	r30, r22
 8bc:	dc 01       	movw	r26, r24
 8be:	41 50       	subi	r20, 0x01	; 1
 8c0:	50 40       	sbci	r21, 0x00	; 0
 8c2:	48 f0       	brcs	.+18     	; 0x8d6 <strncpy+0x1c>
 8c4:	01 90       	ld	r0, Z+
 8c6:	0d 92       	st	X+, r0
 8c8:	00 20       	and	r0, r0
 8ca:	c9 f7       	brne	.-14     	; 0x8be <strncpy+0x4>
 8cc:	01 c0       	rjmp	.+2      	; 0x8d0 <strncpy+0x16>
 8ce:	1d 92       	st	X+, r1
 8d0:	41 50       	subi	r20, 0x01	; 1
 8d2:	50 40       	sbci	r21, 0x00	; 0
 8d4:	e0 f7       	brcc	.-8      	; 0x8ce <strncpy+0x14>
 8d6:	08 95       	ret

000008d8 <sprintf>:
 8d8:	0f 93       	push	r16
 8da:	1f 93       	push	r17
 8dc:	cf 93       	push	r28
 8de:	df 93       	push	r29
 8e0:	cd b7       	in	r28, 0x3d	; 61
 8e2:	de b7       	in	r29, 0x3e	; 62
 8e4:	2e 97       	sbiw	r28, 0x0e	; 14
 8e6:	0f b6       	in	r0, 0x3f	; 63
 8e8:	f8 94       	cli
 8ea:	de bf       	out	0x3e, r29	; 62
 8ec:	0f be       	out	0x3f, r0	; 63
 8ee:	cd bf       	out	0x3d, r28	; 61
 8f0:	0d 89       	ldd	r16, Y+21	; 0x15
 8f2:	1e 89       	ldd	r17, Y+22	; 0x16
 8f4:	86 e0       	ldi	r24, 0x06	; 6
 8f6:	8c 83       	std	Y+4, r24	; 0x04
 8f8:	1a 83       	std	Y+2, r17	; 0x02
 8fa:	09 83       	std	Y+1, r16	; 0x01
 8fc:	8f ef       	ldi	r24, 0xFF	; 255
 8fe:	9f e7       	ldi	r25, 0x7F	; 127
 900:	9e 83       	std	Y+6, r25	; 0x06
 902:	8d 83       	std	Y+5, r24	; 0x05
 904:	ae 01       	movw	r20, r28
 906:	47 5e       	subi	r20, 0xE7	; 231
 908:	5f 4f       	sbci	r21, 0xFF	; 255
 90a:	6f 89       	ldd	r22, Y+23	; 0x17
 90c:	78 8d       	ldd	r23, Y+24	; 0x18
 90e:	ce 01       	movw	r24, r28
 910:	01 96       	adiw	r24, 0x01	; 1
 912:	10 d0       	rcall	.+32     	; 0x934 <vfprintf>
 914:	ef 81       	ldd	r30, Y+7	; 0x07
 916:	f8 85       	ldd	r31, Y+8	; 0x08
 918:	e0 0f       	add	r30, r16
 91a:	f1 1f       	adc	r31, r17
 91c:	10 82       	st	Z, r1
 91e:	2e 96       	adiw	r28, 0x0e	; 14
 920:	0f b6       	in	r0, 0x3f	; 63
 922:	f8 94       	cli
 924:	de bf       	out	0x3e, r29	; 62
 926:	0f be       	out	0x3f, r0	; 63
 928:	cd bf       	out	0x3d, r28	; 61
 92a:	df 91       	pop	r29
 92c:	cf 91       	pop	r28
 92e:	1f 91       	pop	r17
 930:	0f 91       	pop	r16
 932:	08 95       	ret

00000934 <vfprintf>:
 934:	2f 92       	push	r2
 936:	3f 92       	push	r3
 938:	4f 92       	push	r4
 93a:	5f 92       	push	r5
 93c:	6f 92       	push	r6
 93e:	7f 92       	push	r7
 940:	8f 92       	push	r8
 942:	9f 92       	push	r9
 944:	af 92       	push	r10
 946:	bf 92       	push	r11
 948:	cf 92       	push	r12
 94a:	df 92       	push	r13
 94c:	ef 92       	push	r14
 94e:	ff 92       	push	r15
 950:	0f 93       	push	r16
 952:	1f 93       	push	r17
 954:	cf 93       	push	r28
 956:	df 93       	push	r29
 958:	cd b7       	in	r28, 0x3d	; 61
 95a:	de b7       	in	r29, 0x3e	; 62
 95c:	2b 97       	sbiw	r28, 0x0b	; 11
 95e:	0f b6       	in	r0, 0x3f	; 63
 960:	f8 94       	cli
 962:	de bf       	out	0x3e, r29	; 62
 964:	0f be       	out	0x3f, r0	; 63
 966:	cd bf       	out	0x3d, r28	; 61
 968:	6c 01       	movw	r12, r24
 96a:	7b 01       	movw	r14, r22
 96c:	8a 01       	movw	r16, r20
 96e:	fc 01       	movw	r30, r24
 970:	17 82       	std	Z+7, r1	; 0x07
 972:	16 82       	std	Z+6, r1	; 0x06
 974:	83 81       	ldd	r24, Z+3	; 0x03
 976:	81 ff       	sbrs	r24, 1
 978:	bf c1       	rjmp	.+894    	; 0xcf8 <vfprintf+0x3c4>
 97a:	ce 01       	movw	r24, r28
 97c:	01 96       	adiw	r24, 0x01	; 1
 97e:	3c 01       	movw	r6, r24
 980:	f6 01       	movw	r30, r12
 982:	93 81       	ldd	r25, Z+3	; 0x03
 984:	f7 01       	movw	r30, r14
 986:	93 fd       	sbrc	r25, 3
 988:	85 91       	lpm	r24, Z+
 98a:	93 ff       	sbrs	r25, 3
 98c:	81 91       	ld	r24, Z+
 98e:	7f 01       	movw	r14, r30
 990:	88 23       	and	r24, r24
 992:	09 f4       	brne	.+2      	; 0x996 <vfprintf+0x62>
 994:	ad c1       	rjmp	.+858    	; 0xcf0 <vfprintf+0x3bc>
 996:	85 32       	cpi	r24, 0x25	; 37
 998:	39 f4       	brne	.+14     	; 0x9a8 <vfprintf+0x74>
 99a:	93 fd       	sbrc	r25, 3
 99c:	85 91       	lpm	r24, Z+
 99e:	93 ff       	sbrs	r25, 3
 9a0:	81 91       	ld	r24, Z+
 9a2:	7f 01       	movw	r14, r30
 9a4:	85 32       	cpi	r24, 0x25	; 37
 9a6:	21 f4       	brne	.+8      	; 0x9b0 <vfprintf+0x7c>
 9a8:	b6 01       	movw	r22, r12
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	d6 d1       	rcall	.+940    	; 0xd5a <fputc>
 9ae:	e8 cf       	rjmp	.-48     	; 0x980 <vfprintf+0x4c>
 9b0:	91 2c       	mov	r9, r1
 9b2:	21 2c       	mov	r2, r1
 9b4:	31 2c       	mov	r3, r1
 9b6:	ff e1       	ldi	r31, 0x1F	; 31
 9b8:	f3 15       	cp	r31, r3
 9ba:	d8 f0       	brcs	.+54     	; 0x9f2 <vfprintf+0xbe>
 9bc:	8b 32       	cpi	r24, 0x2B	; 43
 9be:	79 f0       	breq	.+30     	; 0x9de <vfprintf+0xaa>
 9c0:	38 f4       	brcc	.+14     	; 0x9d0 <vfprintf+0x9c>
 9c2:	80 32       	cpi	r24, 0x20	; 32
 9c4:	79 f0       	breq	.+30     	; 0x9e4 <vfprintf+0xb0>
 9c6:	83 32       	cpi	r24, 0x23	; 35
 9c8:	a1 f4       	brne	.+40     	; 0x9f2 <vfprintf+0xbe>
 9ca:	23 2d       	mov	r18, r3
 9cc:	20 61       	ori	r18, 0x10	; 16
 9ce:	1d c0       	rjmp	.+58     	; 0xa0a <vfprintf+0xd6>
 9d0:	8d 32       	cpi	r24, 0x2D	; 45
 9d2:	61 f0       	breq	.+24     	; 0x9ec <vfprintf+0xb8>
 9d4:	80 33       	cpi	r24, 0x30	; 48
 9d6:	69 f4       	brne	.+26     	; 0x9f2 <vfprintf+0xbe>
 9d8:	23 2d       	mov	r18, r3
 9da:	21 60       	ori	r18, 0x01	; 1
 9dc:	16 c0       	rjmp	.+44     	; 0xa0a <vfprintf+0xd6>
 9de:	83 2d       	mov	r24, r3
 9e0:	82 60       	ori	r24, 0x02	; 2
 9e2:	38 2e       	mov	r3, r24
 9e4:	e3 2d       	mov	r30, r3
 9e6:	e4 60       	ori	r30, 0x04	; 4
 9e8:	3e 2e       	mov	r3, r30
 9ea:	2a c0       	rjmp	.+84     	; 0xa40 <vfprintf+0x10c>
 9ec:	f3 2d       	mov	r31, r3
 9ee:	f8 60       	ori	r31, 0x08	; 8
 9f0:	1d c0       	rjmp	.+58     	; 0xa2c <vfprintf+0xf8>
 9f2:	37 fc       	sbrc	r3, 7
 9f4:	2d c0       	rjmp	.+90     	; 0xa50 <vfprintf+0x11c>
 9f6:	20 ed       	ldi	r18, 0xD0	; 208
 9f8:	28 0f       	add	r18, r24
 9fa:	2a 30       	cpi	r18, 0x0A	; 10
 9fc:	40 f0       	brcs	.+16     	; 0xa0e <vfprintf+0xda>
 9fe:	8e 32       	cpi	r24, 0x2E	; 46
 a00:	b9 f4       	brne	.+46     	; 0xa30 <vfprintf+0xfc>
 a02:	36 fc       	sbrc	r3, 6
 a04:	75 c1       	rjmp	.+746    	; 0xcf0 <vfprintf+0x3bc>
 a06:	23 2d       	mov	r18, r3
 a08:	20 64       	ori	r18, 0x40	; 64
 a0a:	32 2e       	mov	r3, r18
 a0c:	19 c0       	rjmp	.+50     	; 0xa40 <vfprintf+0x10c>
 a0e:	36 fe       	sbrs	r3, 6
 a10:	06 c0       	rjmp	.+12     	; 0xa1e <vfprintf+0xea>
 a12:	8a e0       	ldi	r24, 0x0A	; 10
 a14:	98 9e       	mul	r9, r24
 a16:	20 0d       	add	r18, r0
 a18:	11 24       	eor	r1, r1
 a1a:	92 2e       	mov	r9, r18
 a1c:	11 c0       	rjmp	.+34     	; 0xa40 <vfprintf+0x10c>
 a1e:	ea e0       	ldi	r30, 0x0A	; 10
 a20:	2e 9e       	mul	r2, r30
 a22:	20 0d       	add	r18, r0
 a24:	11 24       	eor	r1, r1
 a26:	22 2e       	mov	r2, r18
 a28:	f3 2d       	mov	r31, r3
 a2a:	f0 62       	ori	r31, 0x20	; 32
 a2c:	3f 2e       	mov	r3, r31
 a2e:	08 c0       	rjmp	.+16     	; 0xa40 <vfprintf+0x10c>
 a30:	8c 36       	cpi	r24, 0x6C	; 108
 a32:	21 f4       	brne	.+8      	; 0xa3c <vfprintf+0x108>
 a34:	83 2d       	mov	r24, r3
 a36:	80 68       	ori	r24, 0x80	; 128
 a38:	38 2e       	mov	r3, r24
 a3a:	02 c0       	rjmp	.+4      	; 0xa40 <vfprintf+0x10c>
 a3c:	88 36       	cpi	r24, 0x68	; 104
 a3e:	41 f4       	brne	.+16     	; 0xa50 <vfprintf+0x11c>
 a40:	f7 01       	movw	r30, r14
 a42:	93 fd       	sbrc	r25, 3
 a44:	85 91       	lpm	r24, Z+
 a46:	93 ff       	sbrs	r25, 3
 a48:	81 91       	ld	r24, Z+
 a4a:	7f 01       	movw	r14, r30
 a4c:	81 11       	cpse	r24, r1
 a4e:	b3 cf       	rjmp	.-154    	; 0x9b6 <vfprintf+0x82>
 a50:	98 2f       	mov	r25, r24
 a52:	9f 7d       	andi	r25, 0xDF	; 223
 a54:	95 54       	subi	r25, 0x45	; 69
 a56:	93 30       	cpi	r25, 0x03	; 3
 a58:	28 f4       	brcc	.+10     	; 0xa64 <vfprintf+0x130>
 a5a:	0c 5f       	subi	r16, 0xFC	; 252
 a5c:	1f 4f       	sbci	r17, 0xFF	; 255
 a5e:	9f e3       	ldi	r25, 0x3F	; 63
 a60:	99 83       	std	Y+1, r25	; 0x01
 a62:	0d c0       	rjmp	.+26     	; 0xa7e <vfprintf+0x14a>
 a64:	83 36       	cpi	r24, 0x63	; 99
 a66:	31 f0       	breq	.+12     	; 0xa74 <vfprintf+0x140>
 a68:	83 37       	cpi	r24, 0x73	; 115
 a6a:	71 f0       	breq	.+28     	; 0xa88 <vfprintf+0x154>
 a6c:	83 35       	cpi	r24, 0x53	; 83
 a6e:	09 f0       	breq	.+2      	; 0xa72 <vfprintf+0x13e>
 a70:	55 c0       	rjmp	.+170    	; 0xb1c <vfprintf+0x1e8>
 a72:	20 c0       	rjmp	.+64     	; 0xab4 <vfprintf+0x180>
 a74:	f8 01       	movw	r30, r16
 a76:	80 81       	ld	r24, Z
 a78:	89 83       	std	Y+1, r24	; 0x01
 a7a:	0e 5f       	subi	r16, 0xFE	; 254
 a7c:	1f 4f       	sbci	r17, 0xFF	; 255
 a7e:	88 24       	eor	r8, r8
 a80:	83 94       	inc	r8
 a82:	91 2c       	mov	r9, r1
 a84:	53 01       	movw	r10, r6
 a86:	12 c0       	rjmp	.+36     	; 0xaac <vfprintf+0x178>
 a88:	28 01       	movw	r4, r16
 a8a:	f2 e0       	ldi	r31, 0x02	; 2
 a8c:	4f 0e       	add	r4, r31
 a8e:	51 1c       	adc	r5, r1
 a90:	f8 01       	movw	r30, r16
 a92:	a0 80       	ld	r10, Z
 a94:	b1 80       	ldd	r11, Z+1	; 0x01
 a96:	36 fe       	sbrs	r3, 6
 a98:	03 c0       	rjmp	.+6      	; 0xaa0 <vfprintf+0x16c>
 a9a:	69 2d       	mov	r22, r9
 a9c:	70 e0       	ldi	r23, 0x00	; 0
 a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <vfprintf+0x170>
 aa0:	6f ef       	ldi	r22, 0xFF	; 255
 aa2:	7f ef       	ldi	r23, 0xFF	; 255
 aa4:	c5 01       	movw	r24, r10
 aa6:	4e d1       	rcall	.+668    	; 0xd44 <strnlen>
 aa8:	4c 01       	movw	r8, r24
 aaa:	82 01       	movw	r16, r4
 aac:	f3 2d       	mov	r31, r3
 aae:	ff 77       	andi	r31, 0x7F	; 127
 ab0:	3f 2e       	mov	r3, r31
 ab2:	15 c0       	rjmp	.+42     	; 0xade <vfprintf+0x1aa>
 ab4:	28 01       	movw	r4, r16
 ab6:	22 e0       	ldi	r18, 0x02	; 2
 ab8:	42 0e       	add	r4, r18
 aba:	51 1c       	adc	r5, r1
 abc:	f8 01       	movw	r30, r16
 abe:	a0 80       	ld	r10, Z
 ac0:	b1 80       	ldd	r11, Z+1	; 0x01
 ac2:	36 fe       	sbrs	r3, 6
 ac4:	03 c0       	rjmp	.+6      	; 0xacc <vfprintf+0x198>
 ac6:	69 2d       	mov	r22, r9
 ac8:	70 e0       	ldi	r23, 0x00	; 0
 aca:	02 c0       	rjmp	.+4      	; 0xad0 <vfprintf+0x19c>
 acc:	6f ef       	ldi	r22, 0xFF	; 255
 ace:	7f ef       	ldi	r23, 0xFF	; 255
 ad0:	c5 01       	movw	r24, r10
 ad2:	2d d1       	rcall	.+602    	; 0xd2e <strnlen_P>
 ad4:	4c 01       	movw	r8, r24
 ad6:	f3 2d       	mov	r31, r3
 ad8:	f0 68       	ori	r31, 0x80	; 128
 ada:	3f 2e       	mov	r3, r31
 adc:	82 01       	movw	r16, r4
 ade:	33 fc       	sbrc	r3, 3
 ae0:	19 c0       	rjmp	.+50     	; 0xb14 <vfprintf+0x1e0>
 ae2:	82 2d       	mov	r24, r2
 ae4:	90 e0       	ldi	r25, 0x00	; 0
 ae6:	88 16       	cp	r8, r24
 ae8:	99 06       	cpc	r9, r25
 aea:	a0 f4       	brcc	.+40     	; 0xb14 <vfprintf+0x1e0>
 aec:	b6 01       	movw	r22, r12
 aee:	80 e2       	ldi	r24, 0x20	; 32
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	33 d1       	rcall	.+614    	; 0xd5a <fputc>
 af4:	2a 94       	dec	r2
 af6:	f5 cf       	rjmp	.-22     	; 0xae2 <vfprintf+0x1ae>
 af8:	f5 01       	movw	r30, r10
 afa:	37 fc       	sbrc	r3, 7
 afc:	85 91       	lpm	r24, Z+
 afe:	37 fe       	sbrs	r3, 7
 b00:	81 91       	ld	r24, Z+
 b02:	5f 01       	movw	r10, r30
 b04:	b6 01       	movw	r22, r12
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	28 d1       	rcall	.+592    	; 0xd5a <fputc>
 b0a:	21 10       	cpse	r2, r1
 b0c:	2a 94       	dec	r2
 b0e:	21 e0       	ldi	r18, 0x01	; 1
 b10:	82 1a       	sub	r8, r18
 b12:	91 08       	sbc	r9, r1
 b14:	81 14       	cp	r8, r1
 b16:	91 04       	cpc	r9, r1
 b18:	79 f7       	brne	.-34     	; 0xaf8 <vfprintf+0x1c4>
 b1a:	e1 c0       	rjmp	.+450    	; 0xcde <vfprintf+0x3aa>
 b1c:	84 36       	cpi	r24, 0x64	; 100
 b1e:	11 f0       	breq	.+4      	; 0xb24 <vfprintf+0x1f0>
 b20:	89 36       	cpi	r24, 0x69	; 105
 b22:	39 f5       	brne	.+78     	; 0xb72 <vfprintf+0x23e>
 b24:	f8 01       	movw	r30, r16
 b26:	37 fe       	sbrs	r3, 7
 b28:	07 c0       	rjmp	.+14     	; 0xb38 <vfprintf+0x204>
 b2a:	60 81       	ld	r22, Z
 b2c:	71 81       	ldd	r23, Z+1	; 0x01
 b2e:	82 81       	ldd	r24, Z+2	; 0x02
 b30:	93 81       	ldd	r25, Z+3	; 0x03
 b32:	0c 5f       	subi	r16, 0xFC	; 252
 b34:	1f 4f       	sbci	r17, 0xFF	; 255
 b36:	08 c0       	rjmp	.+16     	; 0xb48 <vfprintf+0x214>
 b38:	60 81       	ld	r22, Z
 b3a:	71 81       	ldd	r23, Z+1	; 0x01
 b3c:	07 2e       	mov	r0, r23
 b3e:	00 0c       	add	r0, r0
 b40:	88 0b       	sbc	r24, r24
 b42:	99 0b       	sbc	r25, r25
 b44:	0e 5f       	subi	r16, 0xFE	; 254
 b46:	1f 4f       	sbci	r17, 0xFF	; 255
 b48:	f3 2d       	mov	r31, r3
 b4a:	ff 76       	andi	r31, 0x6F	; 111
 b4c:	3f 2e       	mov	r3, r31
 b4e:	97 ff       	sbrs	r25, 7
 b50:	09 c0       	rjmp	.+18     	; 0xb64 <vfprintf+0x230>
 b52:	90 95       	com	r25
 b54:	80 95       	com	r24
 b56:	70 95       	com	r23
 b58:	61 95       	neg	r22
 b5a:	7f 4f       	sbci	r23, 0xFF	; 255
 b5c:	8f 4f       	sbci	r24, 0xFF	; 255
 b5e:	9f 4f       	sbci	r25, 0xFF	; 255
 b60:	f0 68       	ori	r31, 0x80	; 128
 b62:	3f 2e       	mov	r3, r31
 b64:	2a e0       	ldi	r18, 0x0A	; 10
 b66:	30 e0       	ldi	r19, 0x00	; 0
 b68:	a3 01       	movw	r20, r6
 b6a:	33 d1       	rcall	.+614    	; 0xdd2 <__ultoa_invert>
 b6c:	88 2e       	mov	r8, r24
 b6e:	86 18       	sub	r8, r6
 b70:	44 c0       	rjmp	.+136    	; 0xbfa <vfprintf+0x2c6>
 b72:	85 37       	cpi	r24, 0x75	; 117
 b74:	31 f4       	brne	.+12     	; 0xb82 <vfprintf+0x24e>
 b76:	23 2d       	mov	r18, r3
 b78:	2f 7e       	andi	r18, 0xEF	; 239
 b7a:	b2 2e       	mov	r11, r18
 b7c:	2a e0       	ldi	r18, 0x0A	; 10
 b7e:	30 e0       	ldi	r19, 0x00	; 0
 b80:	25 c0       	rjmp	.+74     	; 0xbcc <vfprintf+0x298>
 b82:	93 2d       	mov	r25, r3
 b84:	99 7f       	andi	r25, 0xF9	; 249
 b86:	b9 2e       	mov	r11, r25
 b88:	8f 36       	cpi	r24, 0x6F	; 111
 b8a:	c1 f0       	breq	.+48     	; 0xbbc <vfprintf+0x288>
 b8c:	18 f4       	brcc	.+6      	; 0xb94 <vfprintf+0x260>
 b8e:	88 35       	cpi	r24, 0x58	; 88
 b90:	79 f0       	breq	.+30     	; 0xbb0 <vfprintf+0x27c>
 b92:	ae c0       	rjmp	.+348    	; 0xcf0 <vfprintf+0x3bc>
 b94:	80 37       	cpi	r24, 0x70	; 112
 b96:	19 f0       	breq	.+6      	; 0xb9e <vfprintf+0x26a>
 b98:	88 37       	cpi	r24, 0x78	; 120
 b9a:	21 f0       	breq	.+8      	; 0xba4 <vfprintf+0x270>
 b9c:	a9 c0       	rjmp	.+338    	; 0xcf0 <vfprintf+0x3bc>
 b9e:	e9 2f       	mov	r30, r25
 ba0:	e0 61       	ori	r30, 0x10	; 16
 ba2:	be 2e       	mov	r11, r30
 ba4:	b4 fe       	sbrs	r11, 4
 ba6:	0d c0       	rjmp	.+26     	; 0xbc2 <vfprintf+0x28e>
 ba8:	fb 2d       	mov	r31, r11
 baa:	f4 60       	ori	r31, 0x04	; 4
 bac:	bf 2e       	mov	r11, r31
 bae:	09 c0       	rjmp	.+18     	; 0xbc2 <vfprintf+0x28e>
 bb0:	34 fe       	sbrs	r3, 4
 bb2:	0a c0       	rjmp	.+20     	; 0xbc8 <vfprintf+0x294>
 bb4:	29 2f       	mov	r18, r25
 bb6:	26 60       	ori	r18, 0x06	; 6
 bb8:	b2 2e       	mov	r11, r18
 bba:	06 c0       	rjmp	.+12     	; 0xbc8 <vfprintf+0x294>
 bbc:	28 e0       	ldi	r18, 0x08	; 8
 bbe:	30 e0       	ldi	r19, 0x00	; 0
 bc0:	05 c0       	rjmp	.+10     	; 0xbcc <vfprintf+0x298>
 bc2:	20 e1       	ldi	r18, 0x10	; 16
 bc4:	30 e0       	ldi	r19, 0x00	; 0
 bc6:	02 c0       	rjmp	.+4      	; 0xbcc <vfprintf+0x298>
 bc8:	20 e1       	ldi	r18, 0x10	; 16
 bca:	32 e0       	ldi	r19, 0x02	; 2
 bcc:	f8 01       	movw	r30, r16
 bce:	b7 fe       	sbrs	r11, 7
 bd0:	07 c0       	rjmp	.+14     	; 0xbe0 <vfprintf+0x2ac>
 bd2:	60 81       	ld	r22, Z
 bd4:	71 81       	ldd	r23, Z+1	; 0x01
 bd6:	82 81       	ldd	r24, Z+2	; 0x02
 bd8:	93 81       	ldd	r25, Z+3	; 0x03
 bda:	0c 5f       	subi	r16, 0xFC	; 252
 bdc:	1f 4f       	sbci	r17, 0xFF	; 255
 bde:	06 c0       	rjmp	.+12     	; 0xbec <vfprintf+0x2b8>
 be0:	60 81       	ld	r22, Z
 be2:	71 81       	ldd	r23, Z+1	; 0x01
 be4:	80 e0       	ldi	r24, 0x00	; 0
 be6:	90 e0       	ldi	r25, 0x00	; 0
 be8:	0e 5f       	subi	r16, 0xFE	; 254
 bea:	1f 4f       	sbci	r17, 0xFF	; 255
 bec:	a3 01       	movw	r20, r6
 bee:	f1 d0       	rcall	.+482    	; 0xdd2 <__ultoa_invert>
 bf0:	88 2e       	mov	r8, r24
 bf2:	86 18       	sub	r8, r6
 bf4:	fb 2d       	mov	r31, r11
 bf6:	ff 77       	andi	r31, 0x7F	; 127
 bf8:	3f 2e       	mov	r3, r31
 bfa:	36 fe       	sbrs	r3, 6
 bfc:	0d c0       	rjmp	.+26     	; 0xc18 <vfprintf+0x2e4>
 bfe:	23 2d       	mov	r18, r3
 c00:	2e 7f       	andi	r18, 0xFE	; 254
 c02:	a2 2e       	mov	r10, r18
 c04:	89 14       	cp	r8, r9
 c06:	58 f4       	brcc	.+22     	; 0xc1e <vfprintf+0x2ea>
 c08:	34 fe       	sbrs	r3, 4
 c0a:	0b c0       	rjmp	.+22     	; 0xc22 <vfprintf+0x2ee>
 c0c:	32 fc       	sbrc	r3, 2
 c0e:	09 c0       	rjmp	.+18     	; 0xc22 <vfprintf+0x2ee>
 c10:	83 2d       	mov	r24, r3
 c12:	8e 7e       	andi	r24, 0xEE	; 238
 c14:	a8 2e       	mov	r10, r24
 c16:	05 c0       	rjmp	.+10     	; 0xc22 <vfprintf+0x2ee>
 c18:	b8 2c       	mov	r11, r8
 c1a:	a3 2c       	mov	r10, r3
 c1c:	03 c0       	rjmp	.+6      	; 0xc24 <vfprintf+0x2f0>
 c1e:	b8 2c       	mov	r11, r8
 c20:	01 c0       	rjmp	.+2      	; 0xc24 <vfprintf+0x2f0>
 c22:	b9 2c       	mov	r11, r9
 c24:	a4 fe       	sbrs	r10, 4
 c26:	0f c0       	rjmp	.+30     	; 0xc46 <vfprintf+0x312>
 c28:	fe 01       	movw	r30, r28
 c2a:	e8 0d       	add	r30, r8
 c2c:	f1 1d       	adc	r31, r1
 c2e:	80 81       	ld	r24, Z
 c30:	80 33       	cpi	r24, 0x30	; 48
 c32:	21 f4       	brne	.+8      	; 0xc3c <vfprintf+0x308>
 c34:	9a 2d       	mov	r25, r10
 c36:	99 7e       	andi	r25, 0xE9	; 233
 c38:	a9 2e       	mov	r10, r25
 c3a:	09 c0       	rjmp	.+18     	; 0xc4e <vfprintf+0x31a>
 c3c:	a2 fe       	sbrs	r10, 2
 c3e:	06 c0       	rjmp	.+12     	; 0xc4c <vfprintf+0x318>
 c40:	b3 94       	inc	r11
 c42:	b3 94       	inc	r11
 c44:	04 c0       	rjmp	.+8      	; 0xc4e <vfprintf+0x31a>
 c46:	8a 2d       	mov	r24, r10
 c48:	86 78       	andi	r24, 0x86	; 134
 c4a:	09 f0       	breq	.+2      	; 0xc4e <vfprintf+0x31a>
 c4c:	b3 94       	inc	r11
 c4e:	a3 fc       	sbrc	r10, 3
 c50:	10 c0       	rjmp	.+32     	; 0xc72 <vfprintf+0x33e>
 c52:	a0 fe       	sbrs	r10, 0
 c54:	06 c0       	rjmp	.+12     	; 0xc62 <vfprintf+0x32e>
 c56:	b2 14       	cp	r11, r2
 c58:	80 f4       	brcc	.+32     	; 0xc7a <vfprintf+0x346>
 c5a:	28 0c       	add	r2, r8
 c5c:	92 2c       	mov	r9, r2
 c5e:	9b 18       	sub	r9, r11
 c60:	0d c0       	rjmp	.+26     	; 0xc7c <vfprintf+0x348>
 c62:	b2 14       	cp	r11, r2
 c64:	58 f4       	brcc	.+22     	; 0xc7c <vfprintf+0x348>
 c66:	b6 01       	movw	r22, r12
 c68:	80 e2       	ldi	r24, 0x20	; 32
 c6a:	90 e0       	ldi	r25, 0x00	; 0
 c6c:	76 d0       	rcall	.+236    	; 0xd5a <fputc>
 c6e:	b3 94       	inc	r11
 c70:	f8 cf       	rjmp	.-16     	; 0xc62 <vfprintf+0x32e>
 c72:	b2 14       	cp	r11, r2
 c74:	18 f4       	brcc	.+6      	; 0xc7c <vfprintf+0x348>
 c76:	2b 18       	sub	r2, r11
 c78:	02 c0       	rjmp	.+4      	; 0xc7e <vfprintf+0x34a>
 c7a:	98 2c       	mov	r9, r8
 c7c:	21 2c       	mov	r2, r1
 c7e:	a4 fe       	sbrs	r10, 4
 c80:	0f c0       	rjmp	.+30     	; 0xca0 <vfprintf+0x36c>
 c82:	b6 01       	movw	r22, r12
 c84:	80 e3       	ldi	r24, 0x30	; 48
 c86:	90 e0       	ldi	r25, 0x00	; 0
 c88:	68 d0       	rcall	.+208    	; 0xd5a <fputc>
 c8a:	a2 fe       	sbrs	r10, 2
 c8c:	16 c0       	rjmp	.+44     	; 0xcba <vfprintf+0x386>
 c8e:	a1 fc       	sbrc	r10, 1
 c90:	03 c0       	rjmp	.+6      	; 0xc98 <vfprintf+0x364>
 c92:	88 e7       	ldi	r24, 0x78	; 120
 c94:	90 e0       	ldi	r25, 0x00	; 0
 c96:	02 c0       	rjmp	.+4      	; 0xc9c <vfprintf+0x368>
 c98:	88 e5       	ldi	r24, 0x58	; 88
 c9a:	90 e0       	ldi	r25, 0x00	; 0
 c9c:	b6 01       	movw	r22, r12
 c9e:	0c c0       	rjmp	.+24     	; 0xcb8 <vfprintf+0x384>
 ca0:	8a 2d       	mov	r24, r10
 ca2:	86 78       	andi	r24, 0x86	; 134
 ca4:	51 f0       	breq	.+20     	; 0xcba <vfprintf+0x386>
 ca6:	a1 fe       	sbrs	r10, 1
 ca8:	02 c0       	rjmp	.+4      	; 0xcae <vfprintf+0x37a>
 caa:	8b e2       	ldi	r24, 0x2B	; 43
 cac:	01 c0       	rjmp	.+2      	; 0xcb0 <vfprintf+0x37c>
 cae:	80 e2       	ldi	r24, 0x20	; 32
 cb0:	a7 fc       	sbrc	r10, 7
 cb2:	8d e2       	ldi	r24, 0x2D	; 45
 cb4:	b6 01       	movw	r22, r12
 cb6:	90 e0       	ldi	r25, 0x00	; 0
 cb8:	50 d0       	rcall	.+160    	; 0xd5a <fputc>
 cba:	89 14       	cp	r8, r9
 cbc:	30 f4       	brcc	.+12     	; 0xcca <vfprintf+0x396>
 cbe:	b6 01       	movw	r22, r12
 cc0:	80 e3       	ldi	r24, 0x30	; 48
 cc2:	90 e0       	ldi	r25, 0x00	; 0
 cc4:	4a d0       	rcall	.+148    	; 0xd5a <fputc>
 cc6:	9a 94       	dec	r9
 cc8:	f8 cf       	rjmp	.-16     	; 0xcba <vfprintf+0x386>
 cca:	8a 94       	dec	r8
 ccc:	f3 01       	movw	r30, r6
 cce:	e8 0d       	add	r30, r8
 cd0:	f1 1d       	adc	r31, r1
 cd2:	80 81       	ld	r24, Z
 cd4:	b6 01       	movw	r22, r12
 cd6:	90 e0       	ldi	r25, 0x00	; 0
 cd8:	40 d0       	rcall	.+128    	; 0xd5a <fputc>
 cda:	81 10       	cpse	r8, r1
 cdc:	f6 cf       	rjmp	.-20     	; 0xcca <vfprintf+0x396>
 cde:	22 20       	and	r2, r2
 ce0:	09 f4       	brne	.+2      	; 0xce4 <vfprintf+0x3b0>
 ce2:	4e ce       	rjmp	.-868    	; 0x980 <vfprintf+0x4c>
 ce4:	b6 01       	movw	r22, r12
 ce6:	80 e2       	ldi	r24, 0x20	; 32
 ce8:	90 e0       	ldi	r25, 0x00	; 0
 cea:	37 d0       	rcall	.+110    	; 0xd5a <fputc>
 cec:	2a 94       	dec	r2
 cee:	f7 cf       	rjmp	.-18     	; 0xcde <vfprintf+0x3aa>
 cf0:	f6 01       	movw	r30, r12
 cf2:	86 81       	ldd	r24, Z+6	; 0x06
 cf4:	97 81       	ldd	r25, Z+7	; 0x07
 cf6:	02 c0       	rjmp	.+4      	; 0xcfc <vfprintf+0x3c8>
 cf8:	8f ef       	ldi	r24, 0xFF	; 255
 cfa:	9f ef       	ldi	r25, 0xFF	; 255
 cfc:	2b 96       	adiw	r28, 0x0b	; 11
 cfe:	0f b6       	in	r0, 0x3f	; 63
 d00:	f8 94       	cli
 d02:	de bf       	out	0x3e, r29	; 62
 d04:	0f be       	out	0x3f, r0	; 63
 d06:	cd bf       	out	0x3d, r28	; 61
 d08:	df 91       	pop	r29
 d0a:	cf 91       	pop	r28
 d0c:	1f 91       	pop	r17
 d0e:	0f 91       	pop	r16
 d10:	ff 90       	pop	r15
 d12:	ef 90       	pop	r14
 d14:	df 90       	pop	r13
 d16:	cf 90       	pop	r12
 d18:	bf 90       	pop	r11
 d1a:	af 90       	pop	r10
 d1c:	9f 90       	pop	r9
 d1e:	8f 90       	pop	r8
 d20:	7f 90       	pop	r7
 d22:	6f 90       	pop	r6
 d24:	5f 90       	pop	r5
 d26:	4f 90       	pop	r4
 d28:	3f 90       	pop	r3
 d2a:	2f 90       	pop	r2
 d2c:	08 95       	ret

00000d2e <strnlen_P>:
 d2e:	fc 01       	movw	r30, r24
 d30:	05 90       	lpm	r0, Z+
 d32:	61 50       	subi	r22, 0x01	; 1
 d34:	70 40       	sbci	r23, 0x00	; 0
 d36:	01 10       	cpse	r0, r1
 d38:	d8 f7       	brcc	.-10     	; 0xd30 <strnlen_P+0x2>
 d3a:	80 95       	com	r24
 d3c:	90 95       	com	r25
 d3e:	8e 0f       	add	r24, r30
 d40:	9f 1f       	adc	r25, r31
 d42:	08 95       	ret

00000d44 <strnlen>:
 d44:	fc 01       	movw	r30, r24
 d46:	61 50       	subi	r22, 0x01	; 1
 d48:	70 40       	sbci	r23, 0x00	; 0
 d4a:	01 90       	ld	r0, Z+
 d4c:	01 10       	cpse	r0, r1
 d4e:	d8 f7       	brcc	.-10     	; 0xd46 <strnlen+0x2>
 d50:	80 95       	com	r24
 d52:	90 95       	com	r25
 d54:	8e 0f       	add	r24, r30
 d56:	9f 1f       	adc	r25, r31
 d58:	08 95       	ret

00000d5a <fputc>:
 d5a:	0f 93       	push	r16
 d5c:	1f 93       	push	r17
 d5e:	cf 93       	push	r28
 d60:	df 93       	push	r29
 d62:	fb 01       	movw	r30, r22
 d64:	23 81       	ldd	r18, Z+3	; 0x03
 d66:	21 fd       	sbrc	r18, 1
 d68:	03 c0       	rjmp	.+6      	; 0xd70 <fputc+0x16>
 d6a:	8f ef       	ldi	r24, 0xFF	; 255
 d6c:	9f ef       	ldi	r25, 0xFF	; 255
 d6e:	2c c0       	rjmp	.+88     	; 0xdc8 <fputc+0x6e>
 d70:	22 ff       	sbrs	r18, 2
 d72:	16 c0       	rjmp	.+44     	; 0xda0 <fputc+0x46>
 d74:	46 81       	ldd	r20, Z+6	; 0x06
 d76:	57 81       	ldd	r21, Z+7	; 0x07
 d78:	24 81       	ldd	r18, Z+4	; 0x04
 d7a:	35 81       	ldd	r19, Z+5	; 0x05
 d7c:	42 17       	cp	r20, r18
 d7e:	53 07       	cpc	r21, r19
 d80:	44 f4       	brge	.+16     	; 0xd92 <fputc+0x38>
 d82:	a0 81       	ld	r26, Z
 d84:	b1 81       	ldd	r27, Z+1	; 0x01
 d86:	9d 01       	movw	r18, r26
 d88:	2f 5f       	subi	r18, 0xFF	; 255
 d8a:	3f 4f       	sbci	r19, 0xFF	; 255
 d8c:	31 83       	std	Z+1, r19	; 0x01
 d8e:	20 83       	st	Z, r18
 d90:	8c 93       	st	X, r24
 d92:	26 81       	ldd	r18, Z+6	; 0x06
 d94:	37 81       	ldd	r19, Z+7	; 0x07
 d96:	2f 5f       	subi	r18, 0xFF	; 255
 d98:	3f 4f       	sbci	r19, 0xFF	; 255
 d9a:	37 83       	std	Z+7, r19	; 0x07
 d9c:	26 83       	std	Z+6, r18	; 0x06
 d9e:	14 c0       	rjmp	.+40     	; 0xdc8 <fputc+0x6e>
 da0:	8b 01       	movw	r16, r22
 da2:	ec 01       	movw	r28, r24
 da4:	fb 01       	movw	r30, r22
 da6:	00 84       	ldd	r0, Z+8	; 0x08
 da8:	f1 85       	ldd	r31, Z+9	; 0x09
 daa:	e0 2d       	mov	r30, r0
 dac:	09 95       	icall
 dae:	89 2b       	or	r24, r25
 db0:	e1 f6       	brne	.-72     	; 0xd6a <fputc+0x10>
 db2:	d8 01       	movw	r26, r16
 db4:	16 96       	adiw	r26, 0x06	; 6
 db6:	8d 91       	ld	r24, X+
 db8:	9c 91       	ld	r25, X
 dba:	17 97       	sbiw	r26, 0x07	; 7
 dbc:	01 96       	adiw	r24, 0x01	; 1
 dbe:	17 96       	adiw	r26, 0x07	; 7
 dc0:	9c 93       	st	X, r25
 dc2:	8e 93       	st	-X, r24
 dc4:	16 97       	sbiw	r26, 0x06	; 6
 dc6:	ce 01       	movw	r24, r28
 dc8:	df 91       	pop	r29
 dca:	cf 91       	pop	r28
 dcc:	1f 91       	pop	r17
 dce:	0f 91       	pop	r16
 dd0:	08 95       	ret

00000dd2 <__ultoa_invert>:
 dd2:	fa 01       	movw	r30, r20
 dd4:	aa 27       	eor	r26, r26
 dd6:	28 30       	cpi	r18, 0x08	; 8
 dd8:	51 f1       	breq	.+84     	; 0xe2e <__ultoa_invert+0x5c>
 dda:	20 31       	cpi	r18, 0x10	; 16
 ddc:	81 f1       	breq	.+96     	; 0xe3e <__ultoa_invert+0x6c>
 dde:	e8 94       	clt
 de0:	6f 93       	push	r22
 de2:	6e 7f       	andi	r22, 0xFE	; 254
 de4:	6e 5f       	subi	r22, 0xFE	; 254
 de6:	7f 4f       	sbci	r23, 0xFF	; 255
 de8:	8f 4f       	sbci	r24, 0xFF	; 255
 dea:	9f 4f       	sbci	r25, 0xFF	; 255
 dec:	af 4f       	sbci	r26, 0xFF	; 255
 dee:	b1 e0       	ldi	r27, 0x01	; 1
 df0:	3e d0       	rcall	.+124    	; 0xe6e <__ultoa_invert+0x9c>
 df2:	b4 e0       	ldi	r27, 0x04	; 4
 df4:	3c d0       	rcall	.+120    	; 0xe6e <__ultoa_invert+0x9c>
 df6:	67 0f       	add	r22, r23
 df8:	78 1f       	adc	r23, r24
 dfa:	89 1f       	adc	r24, r25
 dfc:	9a 1f       	adc	r25, r26
 dfe:	a1 1d       	adc	r26, r1
 e00:	68 0f       	add	r22, r24
 e02:	79 1f       	adc	r23, r25
 e04:	8a 1f       	adc	r24, r26
 e06:	91 1d       	adc	r25, r1
 e08:	a1 1d       	adc	r26, r1
 e0a:	6a 0f       	add	r22, r26
 e0c:	71 1d       	adc	r23, r1
 e0e:	81 1d       	adc	r24, r1
 e10:	91 1d       	adc	r25, r1
 e12:	a1 1d       	adc	r26, r1
 e14:	20 d0       	rcall	.+64     	; 0xe56 <__ultoa_invert+0x84>
 e16:	09 f4       	brne	.+2      	; 0xe1a <__ultoa_invert+0x48>
 e18:	68 94       	set
 e1a:	3f 91       	pop	r19
 e1c:	2a e0       	ldi	r18, 0x0A	; 10
 e1e:	26 9f       	mul	r18, r22
 e20:	11 24       	eor	r1, r1
 e22:	30 19       	sub	r19, r0
 e24:	30 5d       	subi	r19, 0xD0	; 208
 e26:	31 93       	st	Z+, r19
 e28:	de f6       	brtc	.-74     	; 0xde0 <__ultoa_invert+0xe>
 e2a:	cf 01       	movw	r24, r30
 e2c:	08 95       	ret
 e2e:	46 2f       	mov	r20, r22
 e30:	47 70       	andi	r20, 0x07	; 7
 e32:	40 5d       	subi	r20, 0xD0	; 208
 e34:	41 93       	st	Z+, r20
 e36:	b3 e0       	ldi	r27, 0x03	; 3
 e38:	0f d0       	rcall	.+30     	; 0xe58 <__ultoa_invert+0x86>
 e3a:	c9 f7       	brne	.-14     	; 0xe2e <__ultoa_invert+0x5c>
 e3c:	f6 cf       	rjmp	.-20     	; 0xe2a <__ultoa_invert+0x58>
 e3e:	46 2f       	mov	r20, r22
 e40:	4f 70       	andi	r20, 0x0F	; 15
 e42:	40 5d       	subi	r20, 0xD0	; 208
 e44:	4a 33       	cpi	r20, 0x3A	; 58
 e46:	18 f0       	brcs	.+6      	; 0xe4e <__ultoa_invert+0x7c>
 e48:	49 5d       	subi	r20, 0xD9	; 217
 e4a:	31 fd       	sbrc	r19, 1
 e4c:	40 52       	subi	r20, 0x20	; 32
 e4e:	41 93       	st	Z+, r20
 e50:	02 d0       	rcall	.+4      	; 0xe56 <__ultoa_invert+0x84>
 e52:	a9 f7       	brne	.-22     	; 0xe3e <__ultoa_invert+0x6c>
 e54:	ea cf       	rjmp	.-44     	; 0xe2a <__ultoa_invert+0x58>
 e56:	b4 e0       	ldi	r27, 0x04	; 4
 e58:	a6 95       	lsr	r26
 e5a:	97 95       	ror	r25
 e5c:	87 95       	ror	r24
 e5e:	77 95       	ror	r23
 e60:	67 95       	ror	r22
 e62:	ba 95       	dec	r27
 e64:	c9 f7       	brne	.-14     	; 0xe58 <__ultoa_invert+0x86>
 e66:	00 97       	sbiw	r24, 0x00	; 0
 e68:	61 05       	cpc	r22, r1
 e6a:	71 05       	cpc	r23, r1
 e6c:	08 95       	ret
 e6e:	9b 01       	movw	r18, r22
 e70:	ac 01       	movw	r20, r24
 e72:	0a 2e       	mov	r0, r26
 e74:	06 94       	lsr	r0
 e76:	57 95       	ror	r21
 e78:	47 95       	ror	r20
 e7a:	37 95       	ror	r19
 e7c:	27 95       	ror	r18
 e7e:	ba 95       	dec	r27
 e80:	c9 f7       	brne	.-14     	; 0xe74 <__ultoa_invert+0xa2>
 e82:	62 0f       	add	r22, r18
 e84:	73 1f       	adc	r23, r19
 e86:	84 1f       	adc	r24, r20
 e88:	95 1f       	adc	r25, r21
 e8a:	a0 1d       	adc	r26, r0
 e8c:	08 95       	ret

00000e8e <_exit>:
 e8e:	f8 94       	cli

00000e90 <__stop_program>:
 e90:	ff cf       	rjmp	.-2      	; 0xe90 <__stop_program>
